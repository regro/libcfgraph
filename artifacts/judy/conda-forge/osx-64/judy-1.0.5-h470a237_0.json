{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.10.9",
  "conda_private": false,
  "conda_version": "4.5.8",
  "description": "Judy is a C library that implements a dynamic array.  Empty Judy arrays are\ndeclared with null pointers.  A Judy array consumes memory only when\npopulated yet can grow to take advantage of all available memory.  Judy's key\nbenefits are:  scalability, performance, memory efficiency, and ease of use.\nJudy arrays are designed to grow without tuning into the peta-element range,\nscaling near O(log-base-256).\n\nJudy arrays are accessed with insert, retrieve, and delete calls for number\nor string indexes.  Configuration and tuning are not required -- in fact not\npossible.  Judy offers sorting, counting, and neighbor/empty searching.\nIndexes can be sequential, clustered, periodic, or random -- it doesn't\nmatter to the algorithm.  Judy arrays can be arranged hierarchically to\nhandle any bit patterns -- large indexes, sets of keys, etc.\n\nJudy is often an improvement over common data structures such as:  arrays,\nsparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\nother sort and search algorithms, and counting functions.\n",
  "dev_url": "http://sourceforge.net/projects/judy",
  "doc_url": "http://judy.sourceforge.net/doc/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "home": "http://judy.sourceforge.net/index.html",
  "license": "LGPL-2.1",
  "license_file": "COPYING",
  "root_pkgs": [
   "anaconda-client 1.6.14 py_0",
   "asn1crypto 0.24.0 py36_0",
   "beautifulsoup4 4.6.0 py36_0",
   "ca-certificates 2018.4.16 0",
   "certifi 2018.4.16 py36_0",
   "cffi 1.11.5 py36h342bebf_0",
   "chardet 3.0.4 py36h96c241c_1",
   "clyent 1.2.2 py_1",
   "conda 4.5.8 py36_0",
   "conda-build 3.10.9 py36_0",
   "conda-env 2.6.0 h36134e3_0",
   "conda-forge-ci-setup 1.3.5 0",
   "conda-verify 2.0.0 py36_0",
   "cryptography 2.2.2 py36h1de35cc_0",
   "decorator 4.3.0 py_0",
   "filelock 3.0.4 py36_0",
   "glob2 0.6 py_0",
   "idna 2.6 py36h8628d0a_1",
   "ipython_genutils 0.2.0 py_1",
   "jinja2 2.10 py_1",
   "jsonschema 2.6.0 py36_1",
   "jupyter_core 4.4.0 py_0",
   "libcxx 4.0.1 h579ed51_0",
   "libcxxabi 4.0.1 hebd6815_0",
   "libedit 3.1.20170329 hb402a30_2",
   "libffi 3.2.1 h475c297_4",
   "markupsafe 1.0 py36_0",
   "nbformat 4.4.0 py36_0",
   "ncurses 6.1 h0a44026_0",
   "openssl 1.0.2o 0",
   "pip 10.0.1 py36_0",
   "pkginfo 1.4.2 py_1",
   "psutil 5.4.6 py36_0",
   "pycosat 0.6.3 py36hee92d8f_0",
   "pycparser 2.18 py36h724b2fc_1",
   "pyopenssl 18.0.0 py36_0",
   "pysocks 1.6.8 py36_0",
   "python 3.6.5 hc167b69_1",
   "python-dateutil 2.7.3 py_0",
   "python.app 2 py36_8",
   "pytz 2018.5 py_0",
   "pyyaml 3.12 py36_1",
   "readline 7.0 hc1231fa_4",
   "requests 2.18.4 py36h4516966_1",
   "ruamel_yaml 0.15.37 py36h1de35cc_2",
   "setuptools 39.2.0 py36_0",
   "six 1.11.0 py36h0e22d5e_1",
   "sqlite 3.23.1 hf1716c9_0",
   "tk 8.6.7 h35a86e2_3",
   "traitlets 4.3.2 py36_0",
   "urllib3 1.22 py36h68b9469_0",
   "wheel 0.31.1 py36_0",
   "xz 5.2.4 h1de35cc_4",
   "yaml 0.1.7 hc338f04_2",
   "zlib 1.2.11 hf3cbc9b_2"
  ],
  "summary": "C library for creating and accessing sparse dynamic arrays"
 },
 "conda_build_config": {
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "c_compiler": "toolchain_c",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": "numpy",
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "macos_min_version": "10.9",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x.x",
    "min_pin": "x.x.x"
   }
  },
  "python": "3.6",
  "r_base": "3.4",
  "target_platform": "osx-64"
 },
 "files": [
  "include/Judy.h",
  "lib/libJudy.1.0.3.dylib",
  "lib/libJudy.1.dylib",
  "lib/libJudy.a",
  "lib/libJudy.dylib",
  "lib/libJudy.la",
  "share/man/man3/J1BC.3",
  "share/man/man3/J1C.3",
  "share/man/man3/J1F.3",
  "share/man/man3/J1FA.3",
  "share/man/man3/J1FE.3",
  "share/man/man3/J1L.3",
  "share/man/man3/J1LE.3",
  "share/man/man3/J1MU.3",
  "share/man/man3/J1N.3",
  "share/man/man3/J1NE.3",
  "share/man/man3/J1P.3",
  "share/man/man3/J1PE.3",
  "share/man/man3/J1S.3",
  "share/man/man3/J1T.3",
  "share/man/man3/J1U.3",
  "share/man/man3/JHSD.3",
  "share/man/man3/JHSFA.3",
  "share/man/man3/JHSG.3",
  "share/man/man3/JHSI.3",
  "share/man/man3/JLBC.3",
  "share/man/man3/JLC.3",
  "share/man/man3/JLD.3",
  "share/man/man3/JLF.3",
  "share/man/man3/JLFA.3",
  "share/man/man3/JLFE.3",
  "share/man/man3/JLG.3",
  "share/man/man3/JLI.3",
  "share/man/man3/JLL.3",
  "share/man/man3/JLLE.3",
  "share/man/man3/JLMU.3",
  "share/man/man3/JLN.3",
  "share/man/man3/JLNE.3",
  "share/man/man3/JLP.3",
  "share/man/man3/JLPE.3",
  "share/man/man3/JSLD.3",
  "share/man/man3/JSLF.3",
  "share/man/man3/JSLFA.3",
  "share/man/man3/JSLG.3",
  "share/man/man3/JSLI.3",
  "share/man/man3/JSLL.3",
  "share/man/man3/JSLN.3",
  "share/man/man3/JSLP.3",
  "share/man/man3/Judy.3",
  "share/man/man3/Judy1.3",
  "share/man/man3/Judy1ByCount.3",
  "share/man/man3/Judy1Count.3",
  "share/man/man3/Judy1First.3",
  "share/man/man3/Judy1FirstEmpty.3",
  "share/man/man3/Judy1FreeArray.3",
  "share/man/man3/Judy1Last.3",
  "share/man/man3/Judy1LastEmpty.3",
  "share/man/man3/Judy1MemUsed.3",
  "share/man/man3/Judy1Next.3",
  "share/man/man3/Judy1NextEmpty.3",
  "share/man/man3/Judy1Prev.3",
  "share/man/man3/Judy1PrevEmpty.3",
  "share/man/man3/Judy1Set.3",
  "share/man/man3/Judy1Test.3",
  "share/man/man3/Judy1Unset.3",
  "share/man/man3/Judy1_funcs.3",
  "share/man/man3/JudyHS.3",
  "share/man/man3/JudyHSDel.3",
  "share/man/man3/JudyHSFreeArray.3",
  "share/man/man3/JudyHSGet.3",
  "share/man/man3/JudyHSIns.3",
  "share/man/man3/JudyHS_funcs.3",
  "share/man/man3/JudyL.3",
  "share/man/man3/JudyLByCount.3",
  "share/man/man3/JudyLCount.3",
  "share/man/man3/JudyLDel.3",
  "share/man/man3/JudyLFirst.3",
  "share/man/man3/JudyLFirstEmpty.3",
  "share/man/man3/JudyLFreeArray.3",
  "share/man/man3/JudyLGet.3",
  "share/man/man3/JudyLIns.3",
  "share/man/man3/JudyLLast.3",
  "share/man/man3/JudyLLastEmpty.3",
  "share/man/man3/JudyLMemUsed.3",
  "share/man/man3/JudyLNext.3",
  "share/man/man3/JudyLNextEmpty.3",
  "share/man/man3/JudyLPrev.3",
  "share/man/man3/JudyLPrevEmpty.3",
  "share/man/man3/JudyL_funcs.3",
  "share/man/man3/JudySL.3",
  "share/man/man3/JudySLDel.3",
  "share/man/man3/JudySLFirst.3",
  "share/man/man3/JudySLFreeArray.3",
  "share/man/man3/JudySLGet.3",
  "share/man/man3/JudySLIns.3",
  "share/man/man3/JudySLLast.3",
  "share/man/man3/JudySLNext.3",
  "share/man/man3/JudySLPrev.3",
  "share/man/man3/JudySL_funcs.3"
 ],
 "index": {
  "arch": "x86_64",
  "build": "h470a237_0",
  "build_number": 0,
  "depends": [],
  "license": "LGPL-2.1",
  "name": "judy",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1531405496785,
  "version": "1.0.5"
 },
 "metadata_version": 1,
 "name": "judy",
 "raw_recipe": "{% set name = \"Judy\" %}\n{% set version = \"1.0.5\" %}\n{% set sha256 = \"d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://downloads.sourceforge.net/project/judy/judy/{{name}}-{{version}}/{{name}}-{{version}}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n\ntest:\n  commands:\n    - test -f $PREFIX/lib/libJudy.so  # [linux]\n    - test -f $PREFIX/lib/libJudy.a  # [linux]\n    - test -f $PREFIX/lib/libJudy.dylib  # [osx]\n    - test -f $PREFIX/lib/libJudy.la  # [osx]\n    - test -f $PREFIX/include/Judy.h\n\nabout:\n  home: http://judy.sourceforge.net/index.html\n  license: LGPL-2.1\n  license_file: COPYING\n  summary: 'C library for creating and accessing sparse dynamic arrays'\n\n  # The remaining entries in this section are optional, but recommended\n  description: |\n      Judy is a C library that implements a dynamic array.  Empty Judy arrays are\n      declared with null pointers.  A Judy array consumes memory only when\n      populated yet can grow to take advantage of all available memory.  Judy's key\n      benefits are:  scalability, performance, memory efficiency, and ease of use.\n      Judy arrays are designed to grow without tuning into the peta-element range,\n      scaling near O(log-base-256).\n\n      Judy arrays are accessed with insert, retrieve, and delete calls for number\n      or string indexes.  Configuration and tuning are not required -- in fact not\n      possible.  Judy offers sorting, counting, and neighbor/empty searching.\n      Indexes can be sequential, clustered, periodic, or random -- it doesn't\n      matter to the algorithm.  Judy arrays can be arranged hierarchically to\n      handle any bit patterns -- large indexes, sets of keys, etc.\n\n      Judy is often an improvement over common data structures such as:  arrays,\n      sparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\n      other sort and search algorithms, and counting functions.\n  doc_url: http://judy.sourceforge.net/doc/index.html\n  dev_url: http://sourceforge.net/projects/judy\n\nextra:\n  recipe-maintainers:\n    - kalebo\n",
 "rendered_recipe": {
  "about": {
   "description": "Judy is a C library that implements a dynamic array.  Empty Judy arrays are\ndeclared with null pointers.  A Judy array consumes memory only when\npopulated yet can grow to take advantage of all available memory.  Judy's key\nbenefits are:  scalability, performance, memory efficiency, and ease of use.\nJudy arrays are designed to grow without tuning into the peta-element range,\nscaling near O(log-base-256).\n\nJudy arrays are accessed with insert, retrieve, and delete calls for number\nor string indexes.  Configuration and tuning are not required -- in fact not\npossible.  Judy offers sorting, counting, and neighbor/empty searching.\nIndexes can be sequential, clustered, periodic, or random -- it doesn't\nmatter to the algorithm.  Judy arrays can be arranged hierarchically to\nhandle any bit patterns -- large indexes, sets of keys, etc.\n\nJudy is often an improvement over common data structures such as:  arrays,\nsparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\nother sort and search algorithms, and counting functions.\n",
   "dev_url": "http://sourceforge.net/projects/judy",
   "doc_url": "http://judy.sourceforge.net/doc/index.html",
   "home": "http://judy.sourceforge.net/index.html",
   "license": "LGPL-2.1",
   "license_file": "COPYING",
   "summary": "C library for creating and accessing sparse dynamic arrays"
  },
  "build": {
   "number": "0",
   "string": "h470a237_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "kalebo"
   ]
  },
  "package": {
   "name": "judy",
   "version": "1.0.5"
  },
  "requirements": {
   "build": [
    "toolchain 2.1.6 0",
    "toolchain_c_osx-64 2.1.6 0"
   ]
  },
  "source": {
   "fn": "Judy-1.0.5.tar.gz",
   "sha256": "d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb",
   "url": "https://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libJudy.dylib",
    "test -f $PREFIX/lib/libJudy.la",
    "test -f $PREFIX/include/Judy.h"
   ]
  }
 },
 "version": "1.0.5"
}