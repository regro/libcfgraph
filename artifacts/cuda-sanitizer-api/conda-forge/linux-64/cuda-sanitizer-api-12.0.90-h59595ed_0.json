{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.24.0",
  "conda_version": "23.5.0",
  "description": "Provides a set of APIs to enable third-party tools to write GPU sanitizing\ntools, such as memory and race checkers.\n",
  "doc_url": "https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley"
   ]
  },
  "home": "https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
  "license_file": "LICENSE",
  "license_url": "https://docs.nvidia.com/cuda/eula/index.html",
  "root_pkgs": [
   "libnsl 2.0.0 h7f98852_0",
   "libgomp 13.1.0 he5830b7_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "ca-certificates 2023.5.7 hbcca054_0",
   "openssl 3.1.1 hd590300_1",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "ripgrep 13.0.0 h2f28480_2",
   "libbrotlienc 1.0.9 h166bdaf_8",
   "libgcc-ng 13.1.0 he5830b7_0",
   "lcms2 2.15 haa2dc70_1",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "attrs 23.1.0 pyh71513ae_1",
   "python-libarchive-c 4.0 py310hff52083_2",
   "libxml2 2.11.4 h0d562d8_0",
   "libsolv 0.7.24 h3eb15da_0",
   "wheel 0.40.0 pyhd8ed1ab_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "tqdm 4.65.0 pyhd8ed1ab_1",
   "cryptography 41.0.1 py310h75e40e8_0",
   "conda-package-handling 2.0.2 pyh38be061_0",
   "typing_extensions 4.6.3 pyha770c72_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "jsonpatch 1.32 pyhd8ed1ab_0",
   "fmt 9.1.0 h924138e_0",
   "ruamel.yaml.clib 0.2.7 py310h1fa729e_1",
   "python-fastjsonschema 2.17.1 pyhd8ed1ab_0",
   "ncurses 6.4 hcb278e6_0",
   "anaconda-client 1.11.3 pyhd8ed1ab_0",
   "typing-extensions 4.6.3 hd8ed1ab_0",
   "zstandard 0.19.0 py310hdeb6495_1",
   "lzo 2.10 h516909a_1000",
   "conda-pack 0.7.0 pyh6c4a22f_0",
   "importlib_resources 5.12.0 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "libcurl 8.1.2 h409715c_0",
   "perl 5.32.1 2_h7f98852_perl5",
   "python_abi 3.10 3_cp310",
   "pycosat 0.6.4 py310h5764c6d_1",
   "importlib-metadata 6.6.0 pyha770c72_0",
   "brotli-bin 1.0.9 h166bdaf_8",
   "backports 1.0 pyhd8ed1ab_3",
   "libssh2 1.11.0 h0841786_0",
   "libtiff 4.5.1 h8b53f26_0",
   "libbrotlidec 1.0.9 h166bdaf_8",
   "git 2.41.0 pl5321h86e50cf_0",
   "c-ares 1.19.1 hd590300_0",
   "markdown-it-py 3.0.0 pyhd8ed1ab_0",
   "readline 8.2 h8228510_1",
   "ld_impl_linux-64 2.40 h41732ed_0",
   "pthread-stubs 0.4 h36c2ea0_1001",
   "brotli 1.0.9 h166bdaf_8",
   "libffi 3.4.2 h7f98852_5",
   "chardet 5.1.0 py310hff52083_0",
   "tk 8.6.12 h27826a3_0",
   "libuuid 2.38.1 h0b41bf4_0",
   "conda-build 3.24.0 py310hff52083_1",
   "libbrotlicommon 1.0.9 h166bdaf_8",
   "gettext 0.21.1 h27087fc_0",
   "conda 23.5.0 py310hff52083_1",
   "libmamba 1.4.4 h658169a_1",
   "platformdirs 3.5.3 pyhd8ed1ab_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "charset-normalizer 3.1.0 pyhd8ed1ab_0",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "clyent 1.2.2 py_1",
   "prompt_toolkit 3.0.38 hd8ed1ab_0",
   "libdeflate 1.18 h0b41bf4_0",
   "boa 0.14.0 pyhd8ed1ab_4",
   "openjpeg 2.5.0 hfec8fc6_2",
   "reproc 14.2.4 h0b41bf4_0",
   "pytz 2023.3 pyhd8ed1ab_0",
   "requests 2.31.0 pyhd8ed1ab_0",
   "pcre2 10.40 hc3806b6_0",
   "six 1.16.0 pyh6c4a22f_0",
   "libpng 1.6.39 h753d276_0",
   "pyrsistent 0.19.3 py310h1fa729e_0",
   "exceptiongroup 1.1.1 pyhd8ed1ab_0",
   "brotlipy 0.7.0 py310h5764c6d_1005",
   "pluggy 1.0.0 pyhd8ed1ab_5",
   "nbformat 5.9.0 pyhd8ed1ab_0",
   "su-exec 0.2 h166bdaf_1003",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "libwebp-base 1.3.0 h0b41bf4_0",
   "freetype 2.12.1 hca18f0e_1",
   "patch 2.7.6 h7f98852_1002",
   "packaging 23.1 pyhd8ed1ab_0",
   "py-lief 0.12.3 py310hd8f1fbe_0",
   "cffi 1.15.1 py310h255011f_3",
   "rich 13.4.2 pyhd8ed1ab_0",
   "traitlets 5.9.0 pyhd8ed1ab_0",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "psutil 5.9.5 py310h1fa729e_0",
   "filelock 3.12.2 pyhd8ed1ab_0",
   "libzlib 1.2.13 hd590300_5",
   "mamba 1.4.4 py310h51d5547_1",
   "beautifulsoup4 4.12.2 pyha770c72_0",
   "yaml-cpp 0.7.0 h27087fc_2",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "markupsafe 2.1.3 py310h2372a71_0",
   "lz4-c 1.9.4 hcb278e6_0",
   "reproc-cpp 14.2.4 hcb278e6_0",
   "ruamel_yaml 0.15.80 py310h5764c6d_1008",
   "lerc 4.0.0 h27087fc_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "xorg-libxdmcp 1.1.3 h7f98852_0",
   "urllib3 1.26.15 pyhd8ed1ab_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "xz 5.2.6 h166bdaf_0",
   "pip 23.1.2 pyhd8ed1ab_0",
   "xorg-libxau 1.0.11 hd590300_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "libsqlite 3.42.0 h2797004_0",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "krb5 1.20.1 h81ceb04_0",
   "libjpeg-turbo 2.1.5.1 h0b41bf4_0",
   "curl 8.1.2 h409715c_0",
   "idna 3.4 pyhd8ed1ab_0",
   "jsonschema 4.17.3 pyhd8ed1ab_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.32 py310h2372a71_0",
   "libiconv 1.17 h166bdaf_0",
   "libarchive 3.6.2 h039dbb9_1",
   "pyopenssl 23.2.0 pyhd8ed1ab_1",
   "bzip2 1.0.8 h7f98852_4",
   "zipp 3.15.0 pyhd8ed1ab_0",
   "pyyaml 6.0 py310h5764c6d_5",
   "pygments 2.15.1 pyhd8ed1ab_0",
   "libxcb 1.15 h0b41bf4_0",
   "glob2 0.7 py_0",
   "setuptools 67.7.2 pyhd8ed1ab_0",
   "jupyter_core 5.3.1 py310hff52083_0",
   "requests-toolbelt 1.0.0 pyhd8ed1ab_0",
   "libmambapy 1.4.4 py310h8aae740_1",
   "tini 0.19.0 h166bdaf_1",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "_libgcc_mutex 0.1 conda_forge",
   "libev 4.33 h516909a_1",
   "libnghttp2 1.52.0 h61bc06f_0",
   "certifi 2023.5.7 pyhd8ed1ab_0",
   "tornado 6.3.2 py310h2372a71_0",
   "patchelf 0.18.0 h59595ed_0",
   "liblief 0.12.3 h27087fc_0",
   "python 3.10.11 he550d4f_0_cpython",
   "libstdcxx-ng 13.1.0 hfd8a6a1_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "anyio 3.7.0 pyhd8ed1ab_1",
   "json5 0.9.5 pyh9f0ad1d_0",
   "yaml 0.2.5 h7f98852_2",
   "icu 72.1 hcb278e6_0",
   "_openmp_mutex 4.5 2_gnu",
   "libedit 3.1.20191231 he28a2e2_2",
   "pillow 9.5.0 py310h582fbeb_1",
   "wcwidth 0.2.6 pyhd8ed1ab_0",
   "keyutils 1.6.1 h166bdaf_0",
   "conda-package-streaming 0.8.0 pyhd8ed1ab_0",
   "zstd 1.5.2 h3eb15da_6",
   "jsonpointer 2.0 py_0",
   "prompt-toolkit 3.0.38 pyha770c72_0",
   "libexpat 2.5.0 hcb278e6_1",
   "tzdata 2023c h71feb2d_0",
   "mdurl 0.1.0 pyhd8ed1ab_0",
   "boltons 23.0.0 pyhd8ed1ab_0",
   "oras-py 0.1.14 pyhd8ed1ab_0",
   "oniguruma 6.9.8 h166bdaf_0",
   "conda-oci-mirror 0.1.0 pyhd8ed1ab_0",
   "conda-forge-ci-setup 3.31.1 py310hce54274_100",
   "conda-env 2.6.0 1",
   "conda-forge-metadata 0.5.0 pyhd8ed1ab_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "jq 1.6 h36c2ea0_1000",
   "click 8.1.3 unix_pyhd8ed1ab_2"
  ],
  "summary": "Provides a set of APIs to enable third party tools to write GPU sanitizing tools",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "12",
  "cdt_name": "cos6",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "12",
  "docker_image": "quay.io/condaforge/linux-anvil-cos7-x86_64",
  "extend_keys": [
   "ignore_version",
   "pin_run_as_build",
   "extend_keys",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.21",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "LICENSE",
  "bin/compute-sanitizer",
  "compute-sanitizer/TreeLauncherSubreaper",
  "compute-sanitizer/TreeLauncherTargetLdPreloadHelper",
  "compute-sanitizer/compute-sanitizer",
  "compute-sanitizer/docs/ComputeSanitizer/graphics/no-padding.png",
  "compute-sanitizer/docs/ComputeSanitizer/graphics/padding.png",
  "compute-sanitizer/docs/ComputeSanitizer/graphics/use-after-free.png",
  "compute-sanitizer/docs/ComputeSanitizer/graphics/use-before-alloc.png",
  "compute-sanitizer/docs/ComputeSanitizer/index.html",
  "compute-sanitizer/docs/CopyrightAndLicenses/index.html",
  "compute-sanitizer/docs/ReleaseNotes/index.html",
  "compute-sanitizer/docs/SanitizerApi/annotated.html",
  "compute-sanitizer/docs/SanitizerApi/classes.html",
  "compute-sanitizer/docs/SanitizerApi/doxygen.css",
  "compute-sanitizer/docs/SanitizerApi/doxygen.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2blank.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2doc.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2folderclosed.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2folderopen.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2lastnode.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2link.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2mlastnode.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2mnode.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2node.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2plastnode.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2pnode.png",
  "compute-sanitizer/docs/SanitizerApi/ftv2vertline.png",
  "compute-sanitizer/docs/SanitizerApi/functions.html",
  "compute-sanitizer/docs/SanitizerApi/functions_vars.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__BARRIER__API.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__CALLBACK__API.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__MEMORY__API.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__PATCHING__API.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__RESULT__API.html",
  "compute-sanitizer/docs/SanitizerApi/group__SANITIZER__STREAM__API.html",
  "compute-sanitizer/docs/SanitizerApi/index.html",
  "compute-sanitizer/docs/SanitizerApi/modules.html",
  "compute-sanitizer/docs/SanitizerApi/notices-header.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__BatchMemopData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__CallbackData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__EventData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__GraphExecData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__GraphLaunchData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__GraphNodeLaunchData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__LaunchData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__MemcpyData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__MemsetData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceArrayData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceContextData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceFunctionsLazyLoadedData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceMemoryData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceMempoolData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceModuleData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__ResourceStreamData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__SynchronizeData.html",
  "compute-sanitizer/docs/SanitizerApi/structSanitizer__UvmData.html",
  "compute-sanitizer/docs/SanitizerApi/tab_b.gif",
  "compute-sanitizer/docs/SanitizerApi/tab_l.gif",
  "compute-sanitizer/docs/SanitizerApi/tab_r.gif",
  "compute-sanitizer/docs/SanitizerApi/tabs.css",
  "compute-sanitizer/docs/SanitizerApiGuide/index.html",
  "compute-sanitizer/docs/SanitizerNvtxGuide/index.html",
  "compute-sanitizer/docs/common/formatting/bg-head.png",
  "compute-sanitizer/docs/common/formatting/bg-horiz.png",
  "compute-sanitizer/docs/common/formatting/bg-left.png",
  "compute-sanitizer/docs/common/formatting/bg-right.png",
  "compute-sanitizer/docs/common/formatting/bg-sidehead-glow.png",
  "compute-sanitizer/docs/common/formatting/bg-sidehead.png",
  "compute-sanitizer/docs/common/formatting/bg-vert.png",
  "compute-sanitizer/docs/common/formatting/common.min.js",
  "compute-sanitizer/docs/common/formatting/commonltr.css",
  "compute-sanitizer/docs/common/formatting/cppapiref.css",
  "compute-sanitizer/docs/common/formatting/cuda-toolkit-documentation.png",
  "compute-sanitizer/docs/common/formatting/devtools-documentation.png",
  "compute-sanitizer/docs/common/formatting/devzone.png",
  "compute-sanitizer/docs/common/formatting/dita.style.css",
  "compute-sanitizer/docs/common/formatting/html5shiv-printshiv.min.js",
  "compute-sanitizer/docs/common/formatting/jquery.ba-hashchange.min.js",
  "compute-sanitizer/docs/common/formatting/jquery.min.js",
  "compute-sanitizer/docs/common/formatting/jquery.scrollintoview.min.js",
  "compute-sanitizer/docs/common/formatting/magnify-dropdown.png",
  "compute-sanitizer/docs/common/formatting/magnify.png",
  "compute-sanitizer/docs/common/formatting/nvidia.png",
  "compute-sanitizer/docs/common/formatting/prettify/lang-Splus.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-aea.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-agc.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-apollo.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-basic.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-cbm.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-cl.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-clj.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-css.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-dart.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-el.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-erl.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-erlang.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-fs.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-go.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-hs.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lasso.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lassoscript.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-latex.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lgt.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lisp.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-ll.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-llvm.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-logtalk.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-ls.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lsp.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-lua.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-matlab.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-ml.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-mumps.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-n.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-nemerle.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-pascal.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-proto.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-r.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-rd.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-rkt.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-rust.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-s.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-scala.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-scm.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-sql.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-ss.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-swift.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-tcl.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-tex.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-vb.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-vbs.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-vhd.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-vhdl.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-wiki.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-xq.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-xquery.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-yaml.js",
  "compute-sanitizer/docs/common/formatting/prettify/lang-yml.js",
  "compute-sanitizer/docs/common/formatting/prettify/onLoad.png",
  "compute-sanitizer/docs/common/formatting/prettify/prettify.css",
  "compute-sanitizer/docs/common/formatting/prettify/prettify.js",
  "compute-sanitizer/docs/common/formatting/prettify/run_prettify.js",
  "compute-sanitizer/docs/common/formatting/qwcode.highlight.css",
  "compute-sanitizer/docs/common/formatting/search-clear.png",
  "compute-sanitizer/docs/common/formatting/site.css",
  "compute-sanitizer/docs/common/scripts/google-analytics/google-analytics-tracker.js",
  "compute-sanitizer/docs/common/scripts/google-analytics/google-analytics-write.js",
  "compute-sanitizer/docs/common/scripts/tynt/tynt.js",
  "compute-sanitizer/docs/index.html",
  "compute-sanitizer/docs/pdf/ComputeSanitizer.pdf",
  "compute-sanitizer/docs/pdf/CopyrightAndLicenses.pdf",
  "compute-sanitizer/docs/pdf/ReleaseNotes.pdf",
  "compute-sanitizer/docs/pdf/SanitizerApiGuide.pdf",
  "compute-sanitizer/docs/pdf/SanitizerNvtxGuide.pdf",
  "compute-sanitizer/docs/search/check.html",
  "compute-sanitizer/docs/search/files.js",
  "compute-sanitizer/docs/search/htmlFileInfoList.js",
  "compute-sanitizer/docs/search/htmlFileList.js",
  "compute-sanitizer/docs/search/index-1.js",
  "compute-sanitizer/docs/search/index-2.js",
  "compute-sanitizer/docs/search/index-3.js",
  "compute-sanitizer/docs/search/nwSearchFnt.min.js",
  "compute-sanitizer/docs/search/stemmers/en_stemmer.min.js",
  "compute-sanitizer/include/generated_cudaGL_meta.h",
  "compute-sanitizer/include/generated_cudaVDPAU_meta.h",
  "compute-sanitizer/include/generated_cuda_gl_interop_meta.h",
  "compute-sanitizer/include/generated_cuda_meta.h",
  "compute-sanitizer/include/generated_cuda_profiler_api_meta.h",
  "compute-sanitizer/include/generated_cuda_runtime_api_meta.h",
  "compute-sanitizer/include/generated_cuda_vdpau_interop_meta.h",
  "compute-sanitizer/include/sanitizer.h",
  "compute-sanitizer/include/sanitizer_barrier.h",
  "compute-sanitizer/include/sanitizer_callbacks.h",
  "compute-sanitizer/include/sanitizer_driver_cbid.h",
  "compute-sanitizer/include/sanitizer_memory.h",
  "compute-sanitizer/include/sanitizer_patching.h",
  "compute-sanitizer/include/sanitizer_result.h",
  "compute-sanitizer/include/sanitizer_runtime_cbid.h",
  "compute-sanitizer/include/sanitizer_stream.h",
  "compute-sanitizer/libInterceptorInjectionTarget.so",
  "compute-sanitizer/libTreeLauncherPlaceholder.so",
  "compute-sanitizer/libTreeLauncherTargetInjection.so",
  "compute-sanitizer/libTreeLauncherTargetUpdatePreloadInjection.so",
  "compute-sanitizer/libsanitizer-collection.so",
  "compute-sanitizer/libsanitizer-public.so"
 ],
 "index": {
  "arch": "x86_64",
  "build": "h59595ed_0",
  "build_number": 0,
  "depends": [
   "cuda-version >=12.0,<12.1.0a0",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12"
  ],
  "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
  "name": "cuda-sanitizer-api",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1687501525286,
  "version": "12.0.90"
 },
 "metadata_version": 1,
 "name": "cuda-sanitizer-api",
 "raw_recipe": "{% set name = \"cuda-sanitizer-api\" %}\n{% set version = \"12.0.90\" %}\n{% set cuda_version = \"12.0\" %}\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"linux-ppc64le\" %}  # [ppc64le]\n{% set platform = \"linux-sbsa\" %}  # [aarch64]\n{% set platform = \"windows-x86_64\" %}  # [win]\n{% set extension = \"tar.xz\" %}  # [not win]\n{% set extension = \"zip\" %}  # [win]\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_sanitizer_api/{{ platform }}/cuda_sanitizer_api-{{ platform }}-{{ version }}-archive.{{ extension }}\n  sha256: 80e23d82bf4a0bb79c564104121467bd0d15f0142e1dc4fff36bb491bc4b3d4f  # [linux64]\n  sha256: 50d66cab58c7b8aa8473b36844669ee2ea7fc85ad92d49473b30214de22c2d25  # [ppc64le]\n  sha256: c872f56fa4a0ce50f8acf5f154d73d0c7a3290e9fa7ffa0b368fbdae3d1435b9  # [aarch64]\n  sha256: cdb48694de35aed5576aaf81f2443d12791a346d7a186e2c37e7606e252ef4e4  # [win]\n\nbuild:\n  number: 0\n  skip: true  # [osx]\n  missing_dso_whitelist:\n    - '$RPATH/libInterceptorInjectionTarget.so'  # [linux]\n    - '$RPATH/InterceptorInjectionTarget.dll'    # [win]\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n  host:\n    - cuda-version {{ cuda_version }}\n  run:\n    - {{ pin_compatible(\"cuda-version\", max_pin=\"x.x\") }}\n  run_constrained:\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\ntest:\n  commands:\n    - test -f $PREFIX/bin/compute-sanitizer                                         # [linux]\n    - test -f $PREFIX/compute-sanitizer/compute-sanitizer                           # [linux]\n    - if not exist %LIBRARY_PREFIX%\\compute-sanitizer\\compute-sanitizer.exe exit 1  # [win]\n    - if not exist %PREFIX%\\Scripts\\compute-sanitizer.bat exit 1                           # [win]\n    - compute-sanitizer --version\n\nabout:\n  home: https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html\n  license_file: LICENSE\n  license: LicenseRef-NVIDIA-End-User-License-Agreement\n  license_url: https://docs.nvidia.com/cuda/eula/index.html\n  summary: Provides a set of APIs to enable third party tools to write GPU sanitizing tools\n  description: |\n    Provides a set of APIs to enable third-party tools to write GPU sanitizing\n    tools, such as memory and race checkers.\n  doc_url: https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html\n\nextra:\n  recipe-maintainers:\n    - adibbley\n",
 "rendered_recipe": {
  "about": {
   "description": "Provides a set of APIs to enable third-party tools to write GPU sanitizing\ntools, such as memory and race checkers.\n",
   "doc_url": "https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html",
   "home": "https://docs.nvidia.com/compute-sanitizer/SanitizerApiGuide/index.html",
   "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/eula/index.html",
   "summary": "Provides a set of APIs to enable third party tools to write GPU sanitizing tools"
  },
  "build": {
   "missing_dso_whitelist": [
    "$RPATH/libInterceptorInjectionTarget.so"
   ],
   "number": "0",
   "string": "h59595ed_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley"
   ]
  },
  "package": {
   "name": "cuda-sanitizer-api",
   "version": "12.0.90"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-64 2.40 hf600244_0",
    "binutils_linux-64 2.40 hbdbef99_0",
    "gcc_impl_linux-64 12.3.0 he2b93b0_0",
    "gcc_linux-64 12.3.0 h76fc315_0",
    "gxx_impl_linux-64 12.3.0 he2b93b0_0",
    "gxx_linux-64 12.3.0 h8a814eb_0",
    "kernel-headers_linux-64 2.6.32 he073ed8_15",
    "ld_impl_linux-64 2.40 h41732ed_0",
    "libgcc-devel_linux-64 12.3.0 h8bca6fd_0",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libgomp 13.1.0 he5830b7_0",
    "libsanitizer 12.3.0 h0f45ef3_0",
    "libstdcxx-devel_linux-64 12.3.0 h8bca6fd_0",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0",
    "sysroot_linux-64 2.12 he073ed8_15"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "cuda-version 12.0 hffde075_2",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libgomp 13.1.0 he5830b7_0",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0"
   ],
   "run": [
    "cuda-version >=12.0,<12.1.0a0",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12"
   ],
   "run_constrained": []
  },
  "source": {
   "sha256": "80e23d82bf4a0bb79c564104121467bd0d15f0142e1dc4fff36bb491bc4b3d4f",
   "url": "https://developer.download.nvidia.com/compute/cuda/redist/cuda_sanitizer_api/linux-x86_64/cuda_sanitizer_api-linux-x86_64-12.0.90-archive.tar.xz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/bin/compute-sanitizer",
    "test -f $PREFIX/compute-sanitizer/compute-sanitizer",
    "compute-sanitizer --version"
   ]
  }
 },
 "version": "12.0.90"
}