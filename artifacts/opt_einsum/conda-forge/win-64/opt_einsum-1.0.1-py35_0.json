{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge/win-64",
   "https://conda.anaconda.org/conda-forge/noarch",
   "https://repo.continuum.io/pkgs/free/win-64",
   "https://repo.continuum.io/pkgs/free/noarch",
   "https://repo.continuum.io/pkgs/r/win-64",
   "https://repo.continuum.io/pkgs/r/noarch",
   "https://repo.continuum.io/pkgs/pro/win-64",
   "https://repo.continuum.io/pkgs/pro/noarch",
   "https://repo.continuum.io/pkgs/msys2/win-64",
   "https://repo.continuum.io/pkgs/msys2/noarch"
  ],
  "conda_build_version": "2.1.17",
  "conda_env_version": "4.3.22",
  "conda_private": false,
  "conda_version": "4.3.22",
  "description": "Einsum is a very powerful function for contracting tensors of arbitrary dimension and index. However, it is only optimized to contract two terms at a time resulting in non-optimal scaling.\nFor example, let us examine the following index transformation: `M_{pqrs} = C_{pi} C_{qj} I_{ijkl} C_{rk} C_{sl}`\nWe can then develop two seperate implementations that produce the same result: ```python N = 10 C = np.random.rand(N, N) I = np.random.rand(N, N, N, N)\ndef naive(I, C):\n    return np.einsum('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C)\n\ndef optimized(I, C):\n    K = np.einsum('pi,ijkl->pjkl', C, I)\n    K = np.einsum('qj,pjkl->pqkl', C, K)\n    K = np.einsum('rk,pqkl->pqrl', C, K)\n    K = np.einsum('sl,pqrl->pqrs', C, K)\n    return K\n```\nThe einsum function does not consider building intermediate arrays; therefore, helping einsum out by building these intermediate arrays can result in a considerable cost savings even for small N (N=10):\n```python np.allclose(naive(I, C), optimized(I, C)) True\n%timeit naive(I, C) 1 loops, best of 3: 934 ms per loop\n%timeit optimized(I, C) 1000 loops, best of 3: 527 \u00b5s per loop ```\nA 2000 fold speed up for 4 extra lines of code! This contraction can be further complicated by considering that the shape of the C matrices need not be the same, in this case the ordering in which the indices are transformed matters greatly. Logic can be built that optimizes the ordering; however, this is a lot of time and effort for a single expression. The opt_einsum package is a drop in replacement for the np.einsum function and can handle all of this logic for you:\n```python from opt_einsum import contract\n%timeit contract('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C) 1000 loops, best of 3: 324 \u00b5s per loop ```\nThe above will automatically find the optimal contraction order, in this case identical to that of the optimized function above, and compute the products for you. In this case, it even uses `np.dot` under the hood to exploit any vendor BLAS functionality that your NumPy build has!\n",
  "dev_url": "https://github.com/dgasmith/opt_einsum",
  "env_vars": {
   "CIO_TEST": "<not set>",
   "CONDA_DEFAULT_ENV": "root",
   "CONDA_ENVS_PATH": "<not set>",
   "PATH": "C:\\Miniconda35-x64\\Library\\bin;C:\\Miniconda35-x64\\Library\\bin;C:\\Miniconda35-x64\\Library\\bin;C:\\Miniconda35-x64;C:\\Miniconda35-x64\\Library\\mingw-w64\\bin;C:\\Miniconda35-x64\\Library\\usr\\bin;C:\\Miniconda35-x64\\Library\\bin;C:\\Miniconda35-x64\\Scripts;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\7-Zip;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Tools\\GitVersion;C:\\Tools\\PsTools;C:\\Program Files\\Git LFS;C:\\Program Files (x86)\\Subversion\\bin;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Tools\\WebDriver;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.4\\;C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\PrivateAssemblies\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI\\wbin;C:\\Ruby193\\bin;C:\\Tools\\NUnit\\bin;C:\\Tools\\xUnit;C:\\Tools\\MSpec;C:\\Tools\\Coverity\\bin;C:\\Program Files (x86)\\CMake\\bin;C:\\go\\bin;C:\\Program Files\\Java\\jdk1.8.0\\bin;C:\\Python27;C:\\Program Files\\nodejs;C:\\Program Files (x86)\\iojs;C:\\Program Files\\iojs;C:\\Users\\appveyor\\AppData\\Roaming\\npm;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\MSBuild\\14.0\\Bin;C:\\Tools\\NuGet;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files\\Microsoft DNX\\Dnvm;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Apache\\Maven\\bin;C:\\Python27\\Scripts;C:\\Tools\\NUnit3;C:\\Program Files\\Mercurial\\;C:\\Program Files\\LLVM\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\erl8.3\\bin;C:\\Tools\\curl\\bin;C:\\Program Files\\Amazon\\AWSCLI\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\usr\\bin;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\SQLDB\\DAC\\140;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Yarn\\bin;C:\\Program Files\\Microsoft Service Fabric\\bin\\Fabric\\Fabric.Code;C:\\Program Files\\Microsoft SDKs\\Service Fabric\\Tools\\ServiceFabricLocalClusterManager;C:\\Users\\appveyor\\AppData\\Roaming\\npm;C:\\Users\\appveyor\\AppData\\Local\\Yarn\\bin;C:\\Program Files\\AppVeyor\\BuildAgent\\",
   "PYTHONHOME": "<not set>",
   "PYTHONPATH": "<not set>"
  },
  "home": "http://github.com/dgasmith/opt_einsum",
  "license": "MIT",
  "license_family": "MIT",
  "offline": false,
  "root_pkgs": [
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "anaconda-client-1.6.3-py35_0",
    "name": "anaconda-client",
    "platform": null,
    "version": "1.6.3",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "asn1crypto-0.22.0-py35_0",
    "name": "asn1crypto",
    "platform": null,
    "version": "0.22.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "beautifulsoup4-4.5.3-py35_0",
    "name": "beautifulsoup4",
    "platform": null,
    "version": "4.5.3",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "cffi-1.10.0-py35_0",
    "name": "cffi",
    "platform": null,
    "version": "1.10.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "conda-forge",
    "dist_name": "chardet-3.0.2-py35_1",
    "name": "chardet",
    "platform": null,
    "version": "3.0.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "clyent-1.2.1-py35_0",
    "name": "clyent",
    "platform": null,
    "version": "1.2.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "conda-4.3.22-py35_0",
    "name": "conda",
    "platform": null,
    "version": "4.3.22",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "conda-build-2.1.17-py35_0",
    "name": "conda-build",
    "platform": null,
    "version": "2.1.17",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "0",
    "channel": "conda-forge",
    "dist_name": "conda-env-2.6.0-0",
    "name": "conda-env",
    "platform": null,
    "version": "2.6.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "0",
    "channel": "conda-forge",
    "dist_name": "conda-forge-build-setup-4.4.8-0",
    "name": "conda-forge-build-setup",
    "platform": null,
    "version": "4.4.8",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "conda-verify-2.0.0-py35_0",
    "name": "conda-verify",
    "platform": null,
    "version": "2.0.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "console_shortcut-0.1.1-py35_1",
    "name": "console_shortcut",
    "platform": null,
    "version": "0.1.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "cryptography-1.8.1-py35_0",
    "name": "cryptography",
    "platform": null,
    "version": "1.8.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "filelock-2.0.6-py35_0",
    "name": "filelock",
    "platform": null,
    "version": "2.0.6",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "idna-2.5-py35_0",
    "name": "idna",
    "platform": null,
    "version": "2.5",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "jinja2-2.9.5-py35_0",
    "name": "jinja2",
    "platform": null,
    "version": "2.9.5",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "markupsafe-1.0-py35_0",
    "name": "markupsafe",
    "platform": null,
    "version": "1.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "menuinst-1.4.2-py35_1",
    "name": "menuinst",
    "platform": null,
    "version": "1.4.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "vc14_0",
    "channel": "defaults",
    "dist_name": "openssl-1.0.2l-vc14_0",
    "name": "openssl",
    "platform": null,
    "version": "1.0.2l",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "packaging-16.8-py35_0",
    "name": "packaging",
    "platform": null,
    "version": "16.8",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "pip-8.1.2-py35_0",
    "name": "pip",
    "platform": null,
    "version": "8.1.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "pkginfo-1.2.1-py35_0",
    "name": "pkginfo",
    "platform": null,
    "version": "1.2.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "pycosat-0.6.1-py35_1",
    "name": "pycosat",
    "platform": null,
    "version": "0.6.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "pycparser-2.17-py35_0",
    "name": "pycparser",
    "platform": null,
    "version": "2.17",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 4,
    "build_string": "py35_4",
    "channel": "defaults",
    "dist_name": "pycrypto-2.6.1-py35_4",
    "name": "pycrypto",
    "platform": null,
    "version": "2.6.1",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "pyopenssl-17.0.0-py35_0",
    "name": "pyopenssl",
    "platform": null,
    "version": "17.0.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "pyparsing-2.1.4-py35_0",
    "name": "pyparsing",
    "platform": null,
    "version": "2.1.4",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "0",
    "channel": "defaults",
    "dist_name": "python-3.5.2-0",
    "name": "python",
    "platform": null,
    "version": "3.5.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "python-dateutil-2.6.0-py35_0",
    "name": "python-dateutil",
    "platform": null,
    "version": "2.6.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "conda-forge",
    "dist_name": "pytz-2017.2-py35_0",
    "name": "pytz",
    "platform": null,
    "version": "2017.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "pywin32-220-py35_1",
    "name": "pywin32",
    "platform": null,
    "version": "220",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "conda-forge",
    "dist_name": "pyyaml-3.12-py35_1",
    "name": "pyyaml",
    "platform": null,
    "version": "3.12",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "requests-2.14.2-py35_0",
    "name": "requests",
    "platform": null,
    "version": "2.14.2",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "ruamel_yaml-0.11.14-py35_0",
    "name": "ruamel_yaml",
    "platform": null,
    "version": "0.11.14",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "setuptools-27.2.0-py35_1",
    "name": "setuptools",
    "platform": null,
    "version": "27.2.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 1,
    "build_string": "py35_1",
    "channel": "defaults",
    "dist_name": "six-1.10.0-py35_1",
    "name": "six",
    "platform": null,
    "version": "1.10.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "0",
    "channel": "conda-forge",
    "dist_name": "vs2008_express_vc_python_patch-1.0.0-0",
    "name": "vs2008_express_vc_python_patch",
    "platform": null,
    "version": "1.0.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "0",
    "channel": "defaults",
    "dist_name": "vs2015_runtime-14.0.25123-0",
    "name": "vs2015_runtime",
    "platform": null,
    "version": "14.0.25123",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "py35_0",
    "channel": "defaults",
    "dist_name": "wheel-0.29.0-py35_0",
    "name": "wheel",
    "platform": null,
    "version": "0.29.0",
    "with_features_depends": null
   },
   {
    "base_url": null,
    "build_number": 0,
    "build_string": "vc14_0",
    "channel": "conda-forge",
    "dist_name": "yaml-0.1.6-vc14_0",
    "name": "yaml",
    "platform": null,
    "version": "0.1.6",
    "with_features_depends": null
   }
  ],
  "summary": "A contraction optimizer for the NumPy Einsum function."
 },
 "conda_build_config": {},
 "files": [
  "Lib/site-packages/opt_einsum/contract.py",
  "Lib/site-packages/opt_einsum-1.0.1-py3.5.egg-info/zip-safe",
  "Lib/site-packages/opt_einsum/paths.py",
  "Lib/site-packages/opt_einsum-1.0.1-py3.5.egg-info/PKG-INFO",
  "Lib/site-packages/opt_einsum/helpers.py",
  "Lib/site-packages/opt_einsum/blas.py",
  "Lib/site-packages/opt_einsum/parser.py",
  "Lib/site-packages/opt_einsum/__init__.py"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py35_0",
  "build_number": 0,
  "depends": [
   "numpy",
   "python 3.5*"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "opt_einsum",
  "platform": "win",
  "subdir": "win-64",
  "version": "1.0.1"
 },
 "metadata_version": 1,
 "name": "opt_einsum",
 "raw_recipe": "{% set name = \"opt_einsum\" %}\n{% set version = \"1.0.1\" %}\n{% set sha256 = \"247794e7f97ab451ea8f24245fd84174197bec76bd96a4a42b5678884e19e147\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://github.com/dgasmith/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  script: python setup.py install --single-version-externally-managed --record record.txt\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n    - numpy\n\ntest:\n  source_files:\n    - test\n  requires:\n    - python\n    - pytest\n  commands:\n    - py.test -v ./test\n\nabout:\n  home: http://github.com/dgasmith/opt_einsum\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'A contraction optimizer for the NumPy Einsum function.'\n\n  description: >\n    Einsum is a very powerful function for contracting tensors of arbitrary dimension and index.\n    However, it is only optimized to contract two terms at a time resulting in non-optimal scaling.\n    \n    For example, let us examine the following index transformation:\n    `M_{pqrs} = C_{pi} C_{qj} I_{ijkl} C_{rk} C_{sl}`\n    \n    We can then develop two seperate implementations that produce the same result:\n    ```python\n    N = 10\n    C = np.random.rand(N, N)\n    I = np.random.rand(N, N, N, N)\n    \n    def naive(I, C):\n        # N^8 scaling\n        return np.einsum('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C)\n    \n    def optimized(I, C):\n        # N^5 scaling\n        K = np.einsum('pi,ijkl->pjkl', C, I)\n        K = np.einsum('qj,pjkl->pqkl', C, K)\n        K = np.einsum('rk,pqkl->pqrl', C, K)\n        K = np.einsum('sl,pqrl->pqrs', C, K)\n        return K\n    ```\n    \n    The einsum function does not consider building intermediate arrays; therefore, helping einsum out by building these intermediate arrays can result in a considerable cost savings even for small N (N=10):\n    \n    ```python\n    np.allclose(naive(I, C), optimized(I, C))\n    True\n    \n    %timeit naive(I, C)\n    1 loops, best of 3: 934 ms per loop\n    \n    %timeit optimized(I, C)\n    1000 loops, best of 3: 527 \u00b5s per loop\n    ```\n    \n    A 2000 fold speed up for 4 extra lines of code!\n    This contraction can be further complicated by considering that the shape of the C matrices need not be the same, in this case the ordering in which the indices are transformed matters greatly.\n    Logic can be built that optimizes the ordering; however, this is a lot of time and effort for a single expression.\n    The opt_einsum package is a drop in replacement for the np.einsum function and can handle all of this logic for you:\n    \n    ```python\n    from opt_einsum import contract\n    \n    %timeit contract('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C)\n    1000 loops, best of 3: 324 \u00b5s per loop\n    ```\n    \n    The above will automatically find the optimal contraction order, in this case identical to that of the optimized function above, and compute the products for you. In this case, it even uses `np.dot` under the hood to exploit any vendor BLAS functionality that your NumPy build has!\n  dev_url: https://github.com/dgasmith/opt_einsum\n\nextra:\n  recipe-maintainers:\n    - dgasmith\n    - loriab\n",
 "rendered_recipe": {
  "about": {
   "description": "Einsum is a very powerful function for contracting tensors of arbitrary dimension and index. However, it is only optimized to contract two terms at a time resulting in non-optimal scaling.\nFor example, let us examine the following index transformation: `M_{pqrs} = C_{pi} C_{qj} I_{ijkl} C_{rk} C_{sl}`\nWe can then develop two seperate implementations that produce the same result: ```python N = 10 C = np.random.rand(N, N) I = np.random.rand(N, N, N, N)\ndef naive(I, C):\n    return np.einsum('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C)\n\ndef optimized(I, C):\n    K = np.einsum('pi,ijkl->pjkl', C, I)\n    K = np.einsum('qj,pjkl->pqkl', C, K)\n    K = np.einsum('rk,pqkl->pqrl', C, K)\n    K = np.einsum('sl,pqrl->pqrs', C, K)\n    return K\n```\nThe einsum function does not consider building intermediate arrays; therefore, helping einsum out by building these intermediate arrays can result in a considerable cost savings even for small N (N=10):\n```python np.allclose(naive(I, C), optimized(I, C)) True\n%timeit naive(I, C) 1 loops, best of 3: 934 ms per loop\n%timeit optimized(I, C) 1000 loops, best of 3: 527 \u00b5s per loop ```\nA 2000 fold speed up for 4 extra lines of code! This contraction can be further complicated by considering that the shape of the C matrices need not be the same, in this case the ordering in which the indices are transformed matters greatly. Logic can be built that optimizes the ordering; however, this is a lot of time and effort for a single expression. The opt_einsum package is a drop in replacement for the np.einsum function and can handle all of this logic for you:\n```python from opt_einsum import contract\n%timeit contract('pi,qj,ijkl,rk,sl->pqrs', C, C, I, C, C) 1000 loops, best of 3: 324 \u00b5s per loop ```\nThe above will automatically find the optimal contraction order, in this case identical to that of the optimized function above, and compute the products for you. In this case, it even uses `np.dot` under the hood to exploit any vendor BLAS functionality that your NumPy build has!\n",
   "dev_url": "https://github.com/dgasmith/opt_einsum",
   "home": "http://github.com/dgasmith/opt_einsum",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "A contraction optimizer for the NumPy Einsum function."
  },
  "build": {
   "noarch": "",
   "noarch_python": false,
   "number": "0",
   "script": "python setup.py install --single-version-externally-managed --record record.txt",
   "string": "py35_0"
  },
  "extra": {
   "final": true,
   "recipe-maintainers": [
    "dgasmith",
    "loriab"
   ]
  },
  "package": {
   "name": "opt_einsum",
   "version": "1.0.1"
  },
  "requirements": {
   "build": [
    "certifi 2017.4.17 py35_0",
    "vs2015_runtime 14.0.25420 0",
    "setuptools 33.1.1 py35_0",
    "python 3.5.3 3",
    "wincertstore 0.2 py35_0"
   ],
   "run": [
    "python",
    "numpy"
   ]
  },
  "source": {
   "fn": "opt_einsum-1.0.1.tar.gz",
   "sha256": "247794e7f97ab451ea8f24245fd84174197bec76bd96a4a42b5678884e19e147",
   "url": "https://github.com/dgasmith/opt_einsum/archive/v1.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "py.test -v ./test"
   ],
   "requires": [
    "python",
    "pytest"
   ],
   "source_files": [
    "test"
   ]
  }
 },
 "version": "1.0.1"
}