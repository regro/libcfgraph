{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge/linux-64",
   "https://conda.anaconda.org/conda-forge/noarch",
   "https://repo.continuum.io/pkgs/free/linux-64",
   "https://repo.continuum.io/pkgs/free/noarch",
   "https://repo.continuum.io/pkgs/pro/linux-64",
   "https://repo.continuum.io/pkgs/pro/noarch"
  ],
  "conda_build_version": "2.1.2",
  "conda_env_version": "4.2.13",
  "conda_private": false,
  "conda_version": "4.2.13",
  "description": "opty utilizes symbolic descriptions of ordinary differential equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming. In general, if one can express the\ncontinuous first order ordinary differential equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jabcobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
  "dev_url": "http://github.com/csu-hmc/opty",
  "env_vars": {
   "CIO_TEST": "<not set>",
   "CONDA_DEFAULT_ENV": "root",
   "CONDA_ENVS_PATH": "<not set>",
   "LD_LIBRARY_PATH": "/opt/rh/devtoolset-2/root/usr/lib64:/opt/rh/devtoolset-2/root/usr/lib",
   "PATH": "/opt/conda/bin:/opt/rh/devtoolset-2/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin",
   "PYTHONHOME": "<not set>",
   "PYTHONPATH": "/opt/rh/devtoolset-2/root/usr/lib64/python2.6/site-packages:/opt/rh/devtoolset-2/root/usr/lib/python2.6/site-packages"
  },
  "home": "http://github.com/csu-hmc/opty",
  "license": "BSD-2-Clause",
  "license_family": "BSD",
  "offline": false,
  "root_pkgs": [
   "conda-forge::anaconda-client-1.5.1-py35_0",
   "beautifulsoup4-4.5.3-py35_0",
   "conda-forge::ca-certificates-2016.9.26-0",
   "conda-forge::certifi-2016.9.26-py35_0",
   "chardet-2.3.0-py35_0",
   "conda-forge::clyent-1.2.1-py35_0",
   "conda-forge::conda-4.2.13-py35_0",
   "conda-forge::conda-build-2.1.2-py35_0",
   "conda-forge::conda-env-2.6.0-0",
   "conda-forge::conda-forge-build-setup-4.3.0-0",
   "conda-verify-2.0.0-py35_0",
   "conda-forge::curl-7.52.1-0",
   "conda-forge::expat-2.1.0-2",
   "conda-forge::filelock-2.0.6-py35_0",
   "conda-forge::git-2.8.2-4",
   "conda-forge::jinja2-2.8-py35_1",
   "conda-forge::libiconv-1.14-4",
   "conda-forge::markupsafe-0.23-py35_1",
   "conda-forge::ncurses-5.9-10",
   "conda-forge::obvious-ci-0.6.1-py35_1",
   "conda-forge::openssl-1.0.2h-3",
   "conda-forge::patchelf-0.9-1",
   "conda-forge::pip-9.0.1-py35_0",
   "conda-forge::pkginfo-1.2.1-py35_0",
   "conda-forge::pycosat-0.6.1-py35_0",
   "conda-forge::pycrypto-2.6.1-py35_0",
   "conda-forge::python-3.5.3-0",
   "conda-forge::python-dateutil-2.6.0-py35_0",
   "conda-forge::pytz-2016.10-py35_0",
   "conda-forge::pyyaml-3.11-py35_0",
   "conda-forge::readline-6.2-0",
   "conda-forge::requests-2.12.5-py35_0",
   "conda-forge::ruamel_yaml-0.11.14-py35_0",
   "conda-forge::setuptools-33.1.0-py35_0",
   "conda-forge::six-1.10.0-py35_1",
   "conda-forge::sqlite-3.13.0-1",
   "conda-forge::tk-8.5.19-1",
   "conda-forge::wheel-0.29.0-py35_0",
   "conda-forge::xz-5.2.2-0",
   "conda-forge::yaml-0.1.6-0",
   "conda-forge::zlib-1.2.11-0"
  ],
  "summary": "Tools for optimizing dynamic systems using direct collocation."
 },
 "conda_build_config": {},
 "files": [
  "lib/python2.7/site-packages/opty/tests/test_utils.py",
  "lib/python2.7/site-packages/opty/version.py",
  "lib/python2.7/site-packages/opty/tests/__init__.py",
  "lib/python2.7/site-packages/opty/tests/test_direct_collocation.py",
  "lib/python2.7/site-packages/opty/direct_collocation.py",
  "lib/python2.7/site-packages/opty/parameter_identification.py",
  "lib/python2.7/site-packages/opty/__init__.py",
  "lib/python2.7/site-packages/opty/tests/test_parameter_identification.py",
  "lib/python2.7/site-packages/opty-0.1.1-py2.7.egg-info/PKG-INFO",
  "lib/python2.7/site-packages/opty/utils.py"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py27_0",
  "build_number": 0,
  "depends": [
   "cyipopt >=0.1.7",
   "cython >=0.20.1",
   "numpy >=1.8.1",
   "python 2.7*",
   "scipy >=0.14.1",
   "sympy >=0.7.6"
  ],
  "license": "BSD-2-Clause",
  "license_family": "BSD",
  "name": "opty",
  "platform": "linux",
  "subdir": "linux-64",
  "version": "0.1.1"
 },
 "metadata_version": 1,
 "name": "opty",
 "raw_recipe": "{% set name = \"opty\" %}\n{% set version = \"0.1.1\" %}\n{% set sha256 = \"362a65e7b313d3a8fb403ae8148035c40c6078d1ca490b900b78a439110ff16e\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: True  # [win]\n  script: python setup.py install --single-version-externally-managed --record record.txt\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n    - numpy >=1.8.1\n    - scipy >=0.14.1\n    - sympy >=0.7.6\n    - cython >=0.20.1\n    - cyipopt >=0.1.7\n\ntest:\n  imports:\n    - opty\n    - opty.direct_collocation\n    - opty.parameter_identification\n    - opty.utils\n    - opty.tests\n  files:\n    - betts2003.py\n  commands:\n    - python betts2003.py\n\nabout:\n  home: http://github.com/csu-hmc/opty\n  license: BSD-2-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: 'Tools for optimizing dynamic systems using direct collocation.'\n  description: |\n    opty utilizes symbolic descriptions of ordinary differential equations\n    expressed with SymPy to form the constraints needed to solve optimal\n    control and parameter identification problems using the direct collocation\n    method and non-linear programming. In general, if one can express the\n    continuous first order ordinary differential equations of the system as\n    symbolic expressions opty will automatically generate a function to\n    efficiently evaluate the dynamical constraints and a function that\n    evaluates the sparse Jacobian of the constraints, which have been optimized\n    for speed and memory consumption. The translation of the dynamical system\n    description to the NLP form, primarily the formation of the constraints and\n    the Jabcobian of the constraints, manually is a time consuming and error\n    prone process. opty eliminates both of those issues.\n  dev_url: http://github.com/csu-hmc/opty\n\nextra:\n  recipe-maintainers:\n    - moorepants\n",
 "rendered_recipe": {
  "about": {
   "description": "opty utilizes symbolic descriptions of ordinary differential equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming. In general, if one can express the\ncontinuous first order ordinary differential equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jabcobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
   "dev_url": "http://github.com/csu-hmc/opty",
   "home": "http://github.com/csu-hmc/opty",
   "license": "BSD-2-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE.txt",
   "summary": "Tools for optimizing dynamic systems using direct collocation."
  },
  "build": {
   "number": "0",
   "script": "python setup.py install --single-version-externally-managed --record record.txt",
   "string": "py27_0"
  },
  "extra": {
   "recipe-maintainers": [
    "moorepants"
   ]
  },
  "package": {
   "name": "opty",
   "version": "0.1.1"
  },
  "requirements": {
   "build": [],
   "run": [
    "python",
    "numpy >=1.8.1",
    "scipy >=0.14.1",
    "sympy >=0.7.6",
    "cython >=0.20.1",
    "cyipopt >=0.1.7"
   ]
  },
  "source": {
   "fn": "opty-0.1.1.tar.gz",
   "sha256": "362a65e7b313d3a8fb403ae8148035c40c6078d1ca490b900b78a439110ff16e",
   "url": "https://pypi.io/packages/source/o/opty/opty-0.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "python betts2003.py"
   ],
   "files": [
    "betts2003.py"
   ],
   "imports": [
    "opty",
    "opty.direct_collocation",
    "opty.parameter_identification",
    "opty.utils",
    "opty.tests"
   ]
  }
 },
 "version": "0.1.1"
}