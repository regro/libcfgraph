{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.25.0",
  "conda_version": "23.3.1",
  "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
  "dev_url": "https://github.com/openmm/openmm-torch",
  "doc_url": "https://github.com/openmm/openmm-torch",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "mikemhenry"
   ]
  },
  "home": "https://github.com/openmm/openmm-torch",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "README.md",
  "root_pkgs": [
   "rich 13.4.2 pyhd8ed1ab_0",
   "python-libarchive-c 5.0 py310hff52083_1",
   "pycosat 0.6.4 py310h5764c6d_1",
   "keyutils 1.6.1 h166bdaf_0",
   "jsonschema 4.18.4 pyhd8ed1ab_0",
   "patchelf 0.17.2 h58526e2_0",
   "charset-normalizer 3.2.0 pyhd8ed1ab_0",
   "wheel 0.41.0 pyhd8ed1ab_0",
   "libedit 3.1.20191231 he28a2e2_2",
   "libgcc-ng 13.1.0 he5830b7_0",
   "libnsl 2.0.0 h7f98852_0",
   "setuptools 68.0.0 pyhd8ed1ab_0",
   "beautifulsoup4 4.12.2 pyha770c72_0",
   "python 3.10.12 hd12c33a_0_cpython",
   "libtiff 4.5.1 h8b53f26_0",
   "git 2.41.0 pl5321h86e50cf_0",
   "certifi 2023.7.22 pyhd8ed1ab_0",
   "more-itertools 9.1.0 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.32 py310h2372a71_0",
   "krb5 1.21.1 h659d440_0",
   "ncurses 6.4 hcb278e6_0",
   "yaml-cpp 0.7.0 h27087fc_2",
   "dataclasses 0.8 pyhc8e2a94_3",
   "markupsafe 2.1.3 py310h2372a71_0",
   "libuuid 2.38.1 h0b41bf4_0",
   "py-lief 0.12.3 py310hd8f1fbe_0",
   "backports.functools_lru_cache 1.6.5 pyhd8ed1ab_0",
   "libgomp 13.1.0 he5830b7_0",
   "libexpat 2.5.0 hcb278e6_1",
   "brotlipy 0.7.0 py310h5764c6d_1005",
   "xorg-libxau 1.0.11 hd590300_0",
   "perl 5.32.1 4_hd590300_perl5",
   "wcwidth 0.2.6 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "pygments 2.15.1 pyhd8ed1ab_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "c-ares 1.19.1 hd590300_0",
   "libwebp-base 1.3.1 hd590300_0",
   "attrs 23.1.0 pyh71513ae_1",
   "reproc 14.2.4 h0b41bf4_0",
   "filelock 3.12.2 pyhd8ed1ab_0",
   "backports 1.0 pyhd8ed1ab_3",
   "lcms2 2.15 haa2dc70_1",
   "zipp 3.16.2 pyhd8ed1ab_0",
   "traitlets 5.9.0 pyhd8ed1ab_0",
   "libnghttp2 1.52.0 h61bc06f_0",
   "libsqlite 3.42.0 h2797004_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "platformdirs 3.9.1 pyhd8ed1ab_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "libxcb 1.15 h0b41bf4_0",
   "mamba 1.4.2 py310h51d5547_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "icu 72.1 hcb278e6_0",
   "pluggy 1.2.0 pyhd8ed1ab_0",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "pcre2 10.40 hc3806b6_0",
   "ca-certificates 2023.7.22 hbcca054_0",
   "anyio 3.7.1 pyhd8ed1ab_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "referencing 0.30.0 pyhd8ed1ab_0",
   "freetype 2.12.1 hca18f0e_1",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "tornado 6.3.2 py310h2372a71_0",
   "conda-index 0.2.3 pyhd8ed1ab_0",
   "rpds-py 0.9.2 py310hcb5633a_0",
   "patch 2.7.6 h7f98852_1002",
   "boltons 23.0.0 pyhd8ed1ab_0",
   "json5 0.9.14 pyhd8ed1ab_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "requests 2.31.0 pyhd8ed1ab_0",
   "ripgrep 13.0.0 h2f28480_2",
   "libcurl 8.2.0 hca28451_0",
   "jsonpatch 1.32 pyhd8ed1ab_0",
   "cffi 1.15.1 py310h255011f_3",
   "yaml 0.2.5 h7f98852_2",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "idna 3.4 pyhd8ed1ab_0",
   "libstdcxx-ng 13.1.0 hfd8a6a1_0",
   "six 1.16.0 pyh6c4a22f_0",
   "pip 23.2.1 pyhd8ed1ab_0",
   "readline 8.2 h8228510_1",
   "bzip2 1.0.8 h7f98852_4",
   "pybind11-abi 4 hd8ed1ab_3",
   "libpng 1.6.39 h753d276_0",
   "prompt_toolkit 3.0.39 hd8ed1ab_0",
   "libev 4.33 h516909a_1",
   "libjpeg-turbo 2.1.5.1 h0b41bf4_0",
   "urllib3 1.26.15 pyhd8ed1ab_0",
   "markdown-it-py 3.0.0 pyhd8ed1ab_0",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "libzlib 1.2.13 hd590300_5",
   "libffi 3.4.2 h7f98852_5",
   "python_abi 3.10 3_cp310",
   "curl 8.2.0 hca28451_0",
   "pillow 10.0.0 py310h582fbeb_0",
   "typing_extensions 4.7.1 pyha770c72_0",
   "conda-pack 0.7.0 pyh6c4a22f_0",
   "ld_impl_linux-64 2.40 h41732ed_0",
   "openjpeg 2.5.0 hfec8fc6_2",
   "mdurl 0.1.0 pyhd8ed1ab_0",
   "chardet 5.1.0 py310hff52083_0",
   "ruamel.yaml.clib 0.2.7 py310h1fa729e_1",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "xorg-libxdmcp 1.1.3 h7f98852_0",
   "importlib_resources 6.0.0 pyhd8ed1ab_1",
   "openssl 3.1.1 hd590300_1",
   "conda 23.3.1 py310hff52083_0",
   "clyent 1.2.2 py_1",
   "jupyter_core 5.3.1 py310hff52083_0",
   "_openmp_mutex 4.5 2_gnu",
   "cryptography 41.0.2 py310h75e40e8_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "zstandard 0.19.0 py310h1275a96_2",
   "nbformat 5.9.1 pyhd8ed1ab_0",
   "gettext 0.21.1 h27087fc_0",
   "python-fastjsonschema 2.18.0 pyhd8ed1ab_0",
   "psutil 5.9.5 py310h1fa729e_0",
   "ruamel_yaml 0.15.80 py310h5764c6d_1008",
   "prompt-toolkit 3.0.39 pyha770c72_0",
   "libsolv 0.7.24 hfc55251_1",
   "libiconv 1.17 h166bdaf_0",
   "xz 5.2.6 h166bdaf_0",
   "jsonschema-specifications 2023.7.1 pyhd8ed1ab_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "libxml2 2.11.4 h0d562d8_0",
   "conda-build 3.25.0 py310hff52083_0",
   "exceptiongroup 1.1.2 pyhd8ed1ab_0",
   "lzo 2.10 h516909a_1000",
   "libmambapy 1.4.2 py310h1428755_0",
   "libssh2 1.11.0 h0841786_0",
   "liblief 0.12.3 h27087fc_0",
   "requests-toolbelt 1.0.0 pyhd8ed1ab_0",
   "tk 8.6.12 h27826a3_0",
   "lz4-c 1.9.4 hcb278e6_0",
   "zstd 1.5.2 hfc55251_7",
   "pytz 2023.3 pyhd8ed1ab_0",
   "packaging 23.1 pyhd8ed1ab_0",
   "typing-extensions 4.7.1 hd8ed1ab_0",
   "jsonpointer 2.0 py_0",
   "tini 0.19.0 h166bdaf_1",
   "libarchive 3.6.2 h039dbb9_1",
   "fmt 9.1.0 h924138e_0",
   "conda-package-handling 2.0.2 pyh38be061_0",
   "pyyaml 6.0 py310h5764c6d_5",
   "reproc-cpp 14.2.4 hcb278e6_0",
   "lerc 4.0.0 h27087fc_0",
   "conda-package-streaming 0.8.0 pyhd8ed1ab_0",
   "joblib 1.3.0 pyhd8ed1ab_1",
   "libmamba 1.4.2 hcea66bb_0",
   "anaconda-client 1.12.0 pyhd8ed1ab_0",
   "tzdata 2023c h71feb2d_0",
   "click 8.1.6 unix_pyh707e725_0",
   "tqdm 4.65.0 pyhd8ed1ab_1",
   "su-exec 0.2 h166bdaf_1003",
   "libdeflate 1.18 h0b41bf4_0",
   "pthread-stubs 0.4 h36c2ea0_1001",
   "brotli-python 1.0.9 py310hd8f1fbe_9",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "pyopenssl 23.2.0 pyhd8ed1ab_1",
   "_libgcc_mutex 0.1 conda_forge",
   "boa 0.15.1 pyhd8ed1ab_0",
   "conda-forge-metadata 0.5.0 pyhd8ed1ab_0",
   "oras-py 0.1.14 pyhd8ed1ab_0",
   "jq 1.6 h36c2ea0_1000",
   "conda-oci-mirror 0.1.0 pyhd8ed1ab_0",
   "conda-forge-ci-setup 3.32.5 py310h7a2d8a0_100",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "oniguruma 6.9.8 h166bdaf_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "OpenMM plugin to define forces with neural networks",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "11.2",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-cuda:11.2",
  "extend_keys": [
   "ignore_version",
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.22",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_cpython",
  "pytorch": "2.0",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cuda_compiler",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "include/TorchForce.h",
  "include/TorchKernels.h",
  "include/internal/TorchForceImpl.h",
  "include/internal/windowsExportTorch.h",
  "lib/libOpenMMTorch.so",
  "lib/plugins/libOpenMMTorchCUDA.so",
  "lib/plugins/libOpenMMTorchOpenCL.so",
  "lib/plugins/libOpenMMTorchReference.so",
  "lib/python3.9/site-packages/_openmmtorch.cpython-39-x86_64-linux-gnu.so",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/INSTALLER",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/METADATA",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/RECORD",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/REQUESTED",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/WHEEL",
  "lib/python3.9/site-packages/openmmtorch-1.0.dist-info/direct_url.json",
  "lib/python3.9/site-packages/openmmtorch.py",
  "share/openmm-torch/tests/TestCudaTorchForce",
  "share/openmm-torch/tests/TestOpenCLTorchForce",
  "share/openmm-torch/tests/TestReferenceTorchForce",
  "share/openmm-torch/tests/TestSerializeTorchForce",
  "share/openmm-torch/tests/tests/central.pt",
  "share/openmm-torch/tests/tests/forces.pt",
  "share/openmm-torch/tests/tests/generate.py",
  "share/openmm-torch/tests/tests/global.pt",
  "share/openmm-torch/tests/tests/periodic.pt"
 ],
 "index": {
  "arch": "x86_64",
  "build": "cuda112py39h2f84e51_0",
  "build_number": 0,
  "depends": [
   "__glibc >=2.17",
   "cudatoolkit >=11.2,<12",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12",
   "ocl-icd >=2.3.1,<3.0a0",
   "ocl-icd-system",
   "openmm >=8.0.0,<8.1.0a0",
   "python >=3.9,<3.10.0a0",
   "python_abi 3.9.* *_cp39",
   "pytorch >=2.0.0,<2.1.0a0"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "openmm-torch",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1690471653445,
  "version": "1.1"
 },
 "metadata_version": 1,
 "name": "openmm-torch",
 "raw_recipe": "{% set name = \"openmm-torch\" %}\n{% set version = \"1.1\" %}\n\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: a39e76add88eb33c854ccd3d3b9afe65fef7f10797b9f736ee3dc8cdf6d03725\n  patches:\n    - 0001-Fix-paths.patch\n\nbuild:\n  number: 0\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == \"None\"]\n  skip: true  # [win]\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy >=1.19                           # [build_platform != target_platform]\n    - swig <4.1                              # [build_platform != target_platform]\n    - pytorch                                # [build_platform != target_platform]\n    - pytorch =*={{ torch_proc_type }}*      # [build_platform != target_platform]\n    - openmm >=8.0.0                         # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - swig <4.1\n    - openmm >=8.0.0\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    # Leaving two dependencies helps rerender correctly\n    # The first gets filled in by the global pinnings\n    # The second gets the processor type\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n  run:\n    - python\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n  #run_constrained:\n    # 2022/02/05 hmaarrfk\n    # While conda packaging seems to allow us to specify\n    # constraints on the same package in different lines\n    # the resulting package doesn't have the ability to\n    # be specified in multiples lines\n    # This makes it tricky to use run_exports\n    # we add the GPU constraint in the run_constrained\n    # to allow us to have \"two\" constraints on the\n    # running package\n    #- pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - openmmtorch\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    ls -al\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: OpenMM plugin to define forces with neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - jaimergp\n    - peastman\n    - mikemhenry\n",
 "rendered_recipe": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "number": "0",
   "rpaths": [
    "/home/conda/feedstock_root/build_artifacts/openmm-torch_1690471227293/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/lib/python3.9/site-packages/torch/lib",
    "lib/"
   ],
   "string": "cuda112py39h2f84e51_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "mikemhenry",
    "peastman",
    "raimis"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "_sysroot_linux-64_curr_repodata_hack 3 h69a702a_13",
    "binutils_impl_linux-64 2.39 he00db2b_1",
    "binutils_linux-64 2.39 h5fc0e48_13",
    "bzip2 1.0.8 h7f98852_4",
    "c-ares 1.19.1 hd590300_0",
    "ca-certificates 2023.7.22 hbcca054_0",
    "cmake 3.26.4 hcfe8598_0",
    "expat 2.5.0 hcb278e6_1",
    "gcc_impl_linux-64 10.4.0 h5231bdf_19",
    "gcc_linux-64 10.4.0 h9215b83_13",
    "gxx_impl_linux-64 10.4.0 h5231bdf_19",
    "gxx_linux-64 10.4.0 h6e491c6_13",
    "kernel-headers_linux-64 3.10.0 h4a8ded7_13",
    "keyutils 1.6.1 h166bdaf_0",
    "krb5 1.21.1 h659d440_0",
    "ld_impl_linux-64 2.39 hcc3a1bd_1",
    "libcurl 8.2.1 hca28451_0",
    "libdrm-cos7-x86_64 2.4.97 h9b0a68f_1105",
    "libedit 3.1.20191231 he28a2e2_2",
    "libev 4.33 h516909a_1",
    "libexpat 2.5.0 hcb278e6_1",
    "libgcc-devel_linux-64 10.4.0 hd38fd1e_19",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libglvnd-cos7-x86_64 1.0.1 h9b0a68f_1105",
    "libglvnd-glx-cos7-x86_64 1.0.1 h9b0a68f_1105",
    "libgomp 13.1.0 he5830b7_0",
    "libnghttp2 1.52.0 h61bc06f_0",
    "libsanitizer 10.4.0 h5246dfb_19",
    "libssh2 1.11.0 h0841786_0",
    "libstdcxx-devel_linux-64 10.4.0 hd38fd1e_19",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0",
    "libuv 1.44.2 hd590300_1",
    "libzlib 1.2.13 hd590300_5",
    "make 4.3 hd18ef5c_1",
    "mesa-khr-devel-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libgl-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libgl-devel-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libglapi-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "ncurses 6.4 hcb278e6_0",
    "nvcc_linux-64 11.2 hdb70940_22",
    "openssl 3.1.1 hd590300_1",
    "rhash 1.4.3 hd590300_1",
    "sed 4.8 he412f7d_0",
    "sysroot_linux-64 2.17 h4a8ded7_13",
    "xz 5.2.6 h166bdaf_0",
    "zlib 1.2.13 hd590300_5",
    "zstd 1.5.2 hfc55251_7"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_kmp_llvm",
    "bzip2 1.0.8 h7f98852_4",
    "ca-certificates 2023.7.22 hbcca054_0",
    "cuda-version 11.8 h70ddcb2_2",
    "cudatoolkit 11.8.0 h37601d7_11",
    "cudnn 8.8.0.121 h0800d71_1",
    "filelock 3.12.2 pyhd8ed1ab_0",
    "gmp 6.2.1 h58526e2_0",
    "gmpy2 2.1.2 py39h376b7d2_1",
    "icu 72.1 hcb278e6_0",
    "jinja2 3.1.2 pyhd8ed1ab_1",
    "ld_impl_linux-64 2.40 h41732ed_0",
    "libblas 3.9.0 17_linux64_openblas",
    "libcblas 3.9.0 17_linux64_openblas",
    "libffi 3.4.2 h7f98852_5",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libgfortran-ng 13.1.0 h69a702a_0",
    "libgfortran5 13.1.0 h15d22d2_0",
    "libhwloc 2.9.1 nocuda_h7313eea_6",
    "libiconv 1.17 h166bdaf_0",
    "liblapack 3.9.0 17_linux64_openblas",
    "libmagma 2.7.1 hc72dce7_3",
    "libmagma_sparse 2.7.1 hc72dce7_4",
    "libnsl 2.0.0 h7f98852_0",
    "libopenblas 0.3.23 pthreads_h80387f5_0",
    "libprotobuf 3.21.12 h3eb15da_0",
    "libsqlite 3.42.0 h2797004_0",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0",
    "libuuid 2.38.1 h0b41bf4_0",
    "libxml2 2.11.4 h0d562d8_0",
    "libzlib 1.2.13 hd590300_5",
    "llvm-openmp 16.0.6 h4dfa4b3_0",
    "magma 2.7.1 ha770c72_4",
    "markupsafe 2.1.3 py39hd1e30aa_0",
    "mkl 2022.2.1 h84fe81f_16997",
    "mpc 1.3.1 hfe3b2da_0",
    "mpfr 4.2.0 hb012696_0",
    "mpmath 1.3.0 pyhd8ed1ab_0",
    "nccl 2.18.3.1 h12f7317_0",
    "ncurses 6.4 hcb278e6_0",
    "networkx 3.1 pyhd8ed1ab_0",
    "numpy 1.25.1 py39h6183b62_0",
    "ocl-icd 2.3.1 h7f98852_0",
    "ocl-icd-system 1.0.0 1",
    "openmm 8.0.0 py39h7d85326_1",
    "openssl 3.1.1 hd590300_1",
    "pcre 8.45 h9c3ff4c_0",
    "pip 23.2.1 pyhd8ed1ab_0",
    "python 3.9.16 h2782a2a_0_cpython",
    "python_abi 3.9 3_cp39",
    "pytorch 2.0.0 cuda112py39ha9981d0_200",
    "readline 8.2 h8228510_1",
    "setuptools 68.0.0 pyhd8ed1ab_0",
    "sleef 3.5.1 h9b69904_2",
    "swig 4.0.2 hd3c618e_2",
    "sympy 1.12 pypyh9d50eac_103",
    "tbb 2021.9.0 hf52228f_0",
    "tk 8.6.12 h27826a3_0",
    "typing_extensions 4.7.1 pyha770c72_0",
    "tzdata 2023c h71feb2d_0",
    "wheel 0.41.0 pyhd8ed1ab_0",
    "xz 5.2.6 h166bdaf_0",
    "zstd 1.5.2 hfc55251_7"
   ],
   "run": [
    "__glibc >=2.17",
    "cudatoolkit >=11.2,<12",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12",
    "ocl-icd >=2.3.1,<3.0a0",
    "ocl-icd-system",
    "openmm >=8.0.0,<8.1.0a0",
    "python >=3.9,<3.10.0a0",
    "python_abi 3.9.* *_cp39",
    "pytorch >=2.0.0,<2.1.0a0"
   ]
  },
  "source": {
   "patches": [
    "0001-Fix-paths.patch"
   ],
   "sha256": "a39e76add88eb33c854ccd3d3b9afe65fef7f10797b9f736ee3dc8cdf6d03725",
   "url": "https://github.com/openmm/openmm-torch/archive/v1.1.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "version": "1.1"
}