{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.25.0",
  "conda_version": "23.3.1",
  "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
  "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
  "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley",
    "bdice",
    "jakirkham",
    "vyasr"
   ]
  },
  "home": "https://developer.nvidia.com/cudnn",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "license_file": "LICENSE",
  "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
  "root_pkgs": [
   "krb5 1.21.2 hee07e50_0",
   "markdown-it-py 3.0.0 pyhd8ed1ab_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "packaging 23.1 pyhd8ed1ab_0",
   "platformdirs 3.10.0 pyhd8ed1ab_0",
   "wcwidth 0.2.6 pyhd8ed1ab_0",
   "libssh2 1.11.0 hb363fe5_0",
   "anaconda-client 1.12.0 pyhd8ed1ab_1",
   "pyyaml 6.0.1 py310h05217ba_0",
   "libxcb 1.15 h4194056_0",
   "liblief 0.12.3 hbbae597_0",
   "tk 8.6.12 h41c6715_0",
   "ncurses 6.4 h344580c_0",
   "libmambapy 1.4.2 py310hd638ff3_0",
   "pillow 10.0.0 py310h0fec2d4_0",
   "python_abi 3.10 3_cp310",
   "tqdm 4.66.1 pyhd8ed1ab_0",
   "jsonschema 4.19.0 pyhd8ed1ab_1",
   "libiconv 1.17 hb283c62_0",
   "perl 5.32.1 4_ha17a0cc_perl5",
   "joblib 1.3.2 pyhd8ed1ab_0",
   "xorg-libxdmcp 1.1.3 h4e0d66e_0",
   "psutil 5.9.5 py310h82c586f_0",
   "lerc 4.0.0 hbbae597_0",
   "libmamba 1.4.2 h7b0afcb_0",
   "yaml-cpp 0.7.0 hbbae597_2",
   "requests-toolbelt 1.0.0 pyhd8ed1ab_0",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "libarchive 3.6.2 h087afff_1",
   "fmt 9.1.0 h06f31f1_0",
   "libexpat 2.5.0 h883269e_1",
   "icu 73.2 h3b4ca64_0",
   "jsonpointer 2.0 py_0",
   "py-lief 0.12.3 py310h76aa780_0",
   "urllib3 1.26.15 pyhd8ed1ab_0",
   "python-fastjsonschema 2.18.0 pyhd8ed1ab_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "libwebp-base 1.3.1 ha17a0cc_0",
   "bzip2 1.0.8 h4e0d66e_4",
   "conda-index 0.2.3 pyhd8ed1ab_0",
   "attrs 23.1.0 pyh71513ae_1",
   "pysocks 1.7.1 pyha2e5f31_6",
   "_libgcc_mutex 0.1 conda_forge",
   "conda-package-handling 2.2.0 pyh38be061_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "tini 0.19.0 hb283c62_1",
   "libnsl 2.0.0 h4e0d66e_0",
   "yaml 0.2.5 h4e0d66e_2",
   "certifi 2023.7.22 pyhd8ed1ab_0",
   "libgomp 13.1.0 h39a4be8_0",
   "idna 3.4 pyhd8ed1ab_0",
   "more-itertools 10.1.0 pyhd8ed1ab_0",
   "libuuid 2.38.1 h4194056_0",
   "lzo 2.10 h6eb9509_1000",
   "ruamel_yaml 0.15.80 py310h939259b_1008",
   "importlib_resources 6.0.1 pyhd8ed1ab_0",
   "libsqlite 3.43.0 hd4bbf49_0",
   "json5 0.9.14 pyhd8ed1ab_0",
   "python 3.10.12 h4005451_0_cpython",
   "cffi 1.15.1 py310h8b509f7_3",
   "chardet 5.2.0 py310hd032262_0",
   "pluggy 1.3.0 pyhd8ed1ab_0",
   "mdurl 0.1.0 pyhd8ed1ab_0",
   "libnghttp2 1.52.0 hb3a6636_0",
   "cryptography 41.0.3 py310h4d74ddc_0",
   "jsonschema-specifications 2023.7.1 pyhd8ed1ab_0",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "lcms2 2.15 h0139fb3_1",
   "tzdata 2023c h71feb2d_0",
   "pytz 2023.3 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "backports.functools_lru_cache 1.6.5 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.32 py310h05217ba_0",
   "patchelf 0.17.2 hea85c5d_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "referencing 0.30.2 pyhd8ed1ab_0",
   "pip 23.2.1 pyhd8ed1ab_0",
   "nbformat 5.9.2 pyhd8ed1ab_0",
   "xorg-libxau 1.0.11 ha17a0cc_0",
   "exceptiongroup 1.1.3 pyhd8ed1ab_0",
   "markupsafe 2.1.3 py310h6ed3b71_0",
   "xz 5.2.6 hb283c62_0",
   "libdeflate 1.18 h4194056_0",
   "libzlib 1.2.13 ha17a0cc_5",
   "lz4-c 1.9.4 h883269e_0",
   "pygments 2.16.1 pyhd8ed1ab_0",
   "curl 8.2.1 ha571e8f_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "requests 2.31.0 pyhd8ed1ab_0",
   "openjpeg 2.5.0 hbcaec15_2",
   "boltons 23.0.0 pyhd8ed1ab_0",
   "openssl 3.1.2 ha17a0cc_0",
   "backports 1.0 pyhd8ed1ab_3",
   "rich 13.5.1 pyhd8ed1ab_0",
   "charset-normalizer 3.2.0 pyhd8ed1ab_0",
   "libsolv 0.7.24 hff1ad0c_3",
   "conda 23.3.1 py310h194a6c8_0",
   "six 1.16.0 pyh6c4a22f_0",
   "libgcc-ng 13.1.0 h39a4be8_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "jsonpatch 1.32 pyhd8ed1ab_0",
   "pcre2 10.40 h02375f6_0",
   "conda-build 3.25.0 py310h194a6c8_0",
   "pthread-stubs 0.4 h339bb43_1001",
   "zstandard 0.19.0 py310h287625a_2",
   "pycosat 0.6.4 py310h939259b_1",
   "gettext 0.21.1 hbbae597_0",
   "beautifulsoup4 4.12.2 pyha770c72_0",
   "libxml2 2.11.5 h0545f4b_1",
   "reproc-cpp 14.2.4 h883269e_0",
   "ruamel.yaml.clib 0.2.7 py310h82c586f_1",
   "typing_extensions 4.7.1 pyha770c72_0",
   "ripgrep 13.0.0 h0cb23b2_2",
   "filelock 3.12.2 pyhd8ed1ab_0",
   "ca-certificates 2023.7.22 h0f6029e_0",
   "zipp 3.16.2 pyhd8ed1ab_0",
   "prompt_toolkit 3.0.39 hd8ed1ab_0",
   "git 2.42.0 pl5321h7a00b28_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "jupyter_core 5.3.1 py310h194a6c8_0",
   "keyutils 1.6.1 hb283c62_0",
   "mamba 1.4.2 py310h400a96e_0",
   "ld_impl_linux-ppc64le 2.40 hfa29eb9_0",
   "brotlipy 0.7.0 py310h939259b_1005",
   "wheel 0.41.2 pyhd8ed1ab_0",
   "c-ares 1.19.1 ha17a0cc_0",
   "rpds-py 0.9.2 py310h25cbde3_0",
   "conda-libmamba-solver 23.3.0 pyhd8ed1ab_0",
   "pyopenssl 23.2.0 pyhd8ed1ab_1",
   "zstd 1.5.2 h7292585_7",
   "brotli-python 1.0.9 py310h76aa780_9",
   "anyio 3.7.1 pyhd8ed1ab_0",
   "conda-pack 0.7.1 pyhd8ed1ab_0",
   "libcurl 8.2.1 ha571e8f_0",
   "boa 0.15.1 pyhd8ed1ab_0",
   "libstdcxx-ng 13.1.0 h09f375a_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "setuptools 68.1.2 pyhd8ed1ab_0",
   "conda-package-streaming 0.9.0 pyhd8ed1ab_0",
   "traitlets 5.9.0 pyhd8ed1ab_0",
   "_openmp_mutex 4.5 2_gnu",
   "tornado 6.3.3 py310h6ed3b71_0",
   "reproc 14.2.4 h4194056_0",
   "libpng 1.6.39 hcc10993_0",
   "python-libarchive-c 5.0 py310h194a6c8_1",
   "libedit 3.1.20191231 h41a240f_2",
   "clyent 1.2.2 py_1",
   "libffi 3.4.2 h4e0d66e_5",
   "typing-extensions 4.7.1 hd8ed1ab_0",
   "freetype 2.12.1 h90753b0_1",
   "readline 8.2 h0b9b154_1",
   "su-exec 0.2 hb283c62_1003",
   "libjpeg-turbo 2.1.5.1 h4194056_0",
   "click 8.1.7 unix_pyh707e725_0",
   "prompt-toolkit 3.0.39 pyha770c72_0",
   "libev 4.33 h6eb9509_1",
   "pybind11-abi 4 hd8ed1ab_3",
   "libtiff 4.5.1 h50938e9_1",
   "patch 2.7.6 h4e0d66e_1002",
   "conda-env 2.6.0 1",
   "conda-oci-mirror 0.1.0 pyhd8ed1ab_0",
   "conda-forge-ci-setup 3.33.0 py310h9f1fc6e_100",
   "conda-forge-metadata 0.5.2 pyhd8ed1ab_0",
   "jq 1.6 h339bb43_1000",
   "oras-py 0.1.14 pyhd8ed1ab_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "oniguruma 6.9.8 hb283c62_0"
  ],
  "summary": "NVIDIA's cuDNN deep neural network acceleration library",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "12",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "12.0",
  "cudnn": "undefined",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "12",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "ignore_build_only_deps",
   "pin_run_as_build",
   "extend_keys",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "10",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.22",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cuda_compiler",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "bin/.cudnn-post-link.sh",
  "include/cudnn.h",
  "include/cudnn_adv_infer.h",
  "include/cudnn_adv_infer_v8.h",
  "include/cudnn_adv_train.h",
  "include/cudnn_adv_train_v8.h",
  "include/cudnn_backend.h",
  "include/cudnn_backend_v8.h",
  "include/cudnn_cnn_infer.h",
  "include/cudnn_cnn_infer_v8.h",
  "include/cudnn_cnn_train.h",
  "include/cudnn_cnn_train_v8.h",
  "include/cudnn_ops_infer.h",
  "include/cudnn_ops_infer_v8.h",
  "include/cudnn_ops_train.h",
  "include/cudnn_ops_train_v8.h",
  "include/cudnn_version.h",
  "include/cudnn_version_v8.h",
  "lib/libcudnn.so",
  "lib/libcudnn.so.8",
  "lib/libcudnn.so.8.8.0",
  "lib/libcudnn_adv_infer.so",
  "lib/libcudnn_adv_infer.so.8",
  "lib/libcudnn_adv_infer.so.8.8.0",
  "lib/libcudnn_adv_train.so",
  "lib/libcudnn_adv_train.so.8",
  "lib/libcudnn_adv_train.so.8.8.0",
  "lib/libcudnn_cnn_infer.so",
  "lib/libcudnn_cnn_infer.so.8",
  "lib/libcudnn_cnn_infer.so.8.8.0",
  "lib/libcudnn_cnn_train.so",
  "lib/libcudnn_cnn_train.so.8",
  "lib/libcudnn_cnn_train.so.8.8.0",
  "lib/libcudnn_ops_infer.so",
  "lib/libcudnn_ops_infer.so.8",
  "lib/libcudnn_ops_infer.so.8.8.0",
  "lib/libcudnn_ops_train.so",
  "lib/libcudnn_ops_train.so.8",
  "lib/libcudnn_ops_train.so.8.8.0"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "h6252efc_3",
  "build_number": 3,
  "constrains": [
   "__glibc >=2.17"
  ],
  "depends": [
   "cuda-nvrtc",
   "cuda-version >=12.0,<13.0a0",
   "libcublas",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12",
   "libzlib >=1.2.13,<1.3.0a0"
  ],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "name": "cudnn",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1693632197323,
  "version": "8.8.0.121"
 },
 "metadata_version": 1,
 "name": "cudnn",
 "raw_recipe": "{% set version = \"8.8.0.121\" %}\n{% set cuda_major = (cuda_compiler_version|default(\"12.0.0\")).split(\".\")[0] %}\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"linux-ppc64le\" %}  # [ppc64le]\n{% set platform = \"linux-sbsa\" %}  # [aarch64]\n{% set platform = \"windows-x86_64\" %}  # [win]\n{% set extension = \"tar.xz\" %}  # [not win]\n{% set extension = \"zip\" %}  # [win]\n\npackage:\n  name: cudnn\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}\n  sha256: 62046476076d1b455fb13fb78b38d3496bacafbfdbb0494fb3392240a04466ea  # [linux64 and cuda_major == \"11\"]\n  sha256: a0792b666caaf593a9dd4130979578fd3a78230f4407645c295700ef8e7aaaf2  # [linux64 and cuda_major == \"12\"]\n  sha256: a019f2c8a300991d94d718a3524377d978efadaa62349858741f17ef859a9e55  # [aarch64 and cuda_major == \"11\"]\n  sha256: fc668519a8344e9d05335bad4bc5d23a504cdc7579aea41f12d6aa0f3079e709  # [aarch64 and cuda_major == \"12\"]\n  sha256: 521c4b6ef579582953e4df2f5fe95a106bfc6d9dc30c6ac26ed6fd92fd0767b9  # [ppc64le and cuda_major == \"11\"]\n  sha256: cd41ab8b61f5beb54e32c3668ecd311ce926c39006fba256b053dd7d248419d4  # [ppc64le and cuda_major == \"12\"]\n  sha256: 4f0105a51ac6ea947154e252c8b220baf3345803f55644b5aad84e22ae4f8986  # [win and cuda_major == \"11\"]\n  sha256: e362e1fbf6b101ad71aa5314f21d00a4353b90efbe5cdedc5fcfb0f3b68cd791  # [win and cuda_major == \"12\"]\n\nbuild:\n  number: 3\n  # TODO: Enable Windows with CUDA 12 when it is supported in CI\n  skip: True  # [win32 or osx or (win and cuda_major == \"12\")]\n  # Disable binary relocation to workaround patchelf issue\n  # xref: https://github.com/NixOS/patchelf/issues/492\n  binary_relocation: false\n  script:\n    - mkdir -p $PREFIX/include               # [linux]\n    - cp include/cudnn*.h $PREFIX/include/   # [linux]\n    - mkdir -p $PREFIX/lib                   # [linux]\n    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]\n\n    - mkdir %LIBRARY_INC%                                   # [win]\n    - copy %SRC_DIR%\\\\include\\\\cudnn*.h %LIBRARY_INC%\\\\     # [win]\n    - mkdir %LIBRARY_LIB%                                   # [win]\n    - copy %SRC_DIR%\\\\lib\\\\x64\\\\cudnn*.lib %LIBRARY_LIB%\\\\  # [win]\n    - mkdir %LIBRARY_BIN%                                   # [win]\n    - copy %SRC_DIR%\\\\bin\\\\cudnn*.dll %LIBRARY_BIN%\\\\       # [win]\n  ignore_run_exports:\n    - cudatoolkit\n  run_exports:\n    - {{ pin_subpackage('cudnn') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != \"12.0\"]\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    - sysroot_{{ target_platform }} 2.17  # [linux]\n  host:\n    - cuda-version {{ cuda_major }}.0\n    - patchelf >=0.12  # [linux]\n    # to suppress \".so not found\" errors\n    - libzlib       # [linux]\n    - libzlib-wapi  # [win64]\n  run:\n    - {{ pin_compatible(\"cuda-version\", max_pin=\"x\") }}\n    {% if cuda_major == \"11\" %}\n    - cudatoolkit 11.*\n    {% else %}\n    - cuda-nvrtc\n    - libcublas\n    {% endif %}\n  run_constrained:\n    - __glibc >=2.17                        # [linux and not aarch64]\n    - __glibc >=2.28                        # [linux and aarch64]\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\ntest:\n  requires:\n    - {{ compiler('c') }}  # [linux]\n  files:\n    - test_load_elf.c      # [linux]\n  commands:\n    - if not exist %LIBRARY_INC%/cudnn.h exit 1                       # [win]\n    - if not exist %LIBRARY_INC%/cudnn_adv_train.h exit 1             # [win]\n    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                     # [win]\n    - if not exist %LIBRARY_LIB%/cudnn_adv_train.lib exit 1           # [win]\n    - if not exist %LIBRARY_BIN%/cudnn64_8.dll exit 1                 # [win]\n    - if not exist %LIBRARY_BIN%/cudnn_adv_train64_8.dll exit 1       # [win]\n    - test -f $PREFIX/include/cudnn.h                                 # [linux]\n    - test -f $PREFIX/include/cudnn_adv_train.h                       # [linux]\n    - test -f $PREFIX/lib/libcudnn.so                                 # [linux]\n    - test -f $PREFIX/lib/libcudnn_adv_train.so                       # [linux]\n    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf   # [linux]\n    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]\n\nabout:\n  home: https://developer.nvidia.com/cudnn\n  license: LicenseRef-cuDNN-Software-License-Agreement\n  license_file: LICENSE\n  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  summary: \"NVIDIA's cuDNN deep neural network acceleration library\"\n  description: |\n    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\n    primitives for deep neural networks. It provides highly tuned\n    implementations of routines arising frequently in DNN applications.\n\n    License Agreements:- The packages are governed by the NVIDIA cuDNN\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuDNN EULA -\n    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  doc_url: https://docs.nvidia.com/deeplearning/cudnn/\n  dev_url: https://developer.nvidia.com/rdp/cudnn-download\n\nextra:\n  recipe-maintainers:\n    - adibbley\n    - bdice\n    - jakirkham\n    - vyasr\n",
 "rendered_recipe": {
  "about": {
   "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
   "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
   "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
   "home": "https://developer.nvidia.com/cudnn",
   "license": "LicenseRef-cuDNN-Software-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
   "summary": "NVIDIA's cuDNN deep neural network acceleration library"
  },
  "build": {
   "binary_relocation": false,
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "3",
   "run_exports": [
    "cudnn >=8.8.0.121,<9.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "cp include/cudnn*.h $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/libcudnn*.so* $PREFIX/lib/"
   ],
   "string": "h6252efc_3"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley",
    "bdice",
    "jakirkham",
    "vyasr"
   ]
  },
  "package": {
   "name": "cudnn",
   "version": "8.8.0.121"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "_sysroot_linux-ppc64le_curr_repodata_hack 4 h43410cf_13",
    "binutils_impl_linux-ppc64le 2.40 hba8546e_0",
    "binutils_linux-ppc64le 2.40 habd53a0_1",
    "gcc_impl_linux-ppc64le 12.3.0 h42a156f_0",
    "gcc_linux-ppc64le 12.3.0 ha704aac_1",
    "gxx_impl_linux-ppc64le 12.3.0 h42a156f_0",
    "gxx_linux-ppc64le 12.3.0 heef3b40_1",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "ld_impl_linux-ppc64le 2.40 hfa29eb9_0",
    "libgcc-devel_linux-ppc64le 12.3.0 h7176aef_0",
    "libgcc-ng 13.1.0 h39a4be8_0",
    "libgomp 13.1.0 h39a4be8_0",
    "libsanitizer 12.3.0 he912d23_0",
    "libstdcxx-devel_linux-ppc64le 12.3.0 h7176aef_0",
    "libstdcxx-ng 13.1.0 h09f375a_0",
    "sysroot_linux-ppc64le 2.17 h23d7e6c_13"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "cuda-version 12.0 hffde075_2",
    "libgcc-ng 13.1.0 h39a4be8_0",
    "libgomp 13.1.0 h39a4be8_0",
    "libstdcxx-ng 13.1.0 h09f375a_0",
    "libzlib 1.2.13 ha17a0cc_5",
    "patchelf 0.17.2 hea85c5d_0"
   ],
   "run": [
    "cuda-nvrtc",
    "cuda-version >=12.0,<13.0a0",
    "libcublas",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12",
    "libzlib >=1.2.13,<1.3.0a0"
   ],
   "run_constrained": [
    "__glibc >=2.17"
   ]
  },
  "source": {
   "url": "https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-ppc64le/cudnn-linux-ppc64le-8.8.0.121_cuda12-archive.tar.xz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/cudnn.h",
    "test -f $PREFIX/include/cudnn_adv_train.h",
    "test -f $PREFIX/lib/libcudnn.so",
    "test -f $PREFIX/lib/libcudnn_adv_train.so",
    "${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf",
    "for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done"
   ],
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "gcc_linux-ppc64le 12.*"
   ]
  }
 },
 "version": "8.8.0.121"
}