{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.27.0",
  "conda_version": "23.10.0",
  "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
  "dev_url": "https://developer.nvidia.com/cutensor/downloads",
  "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "flow_run_id": "travis_613415555",
   "recipe-maintainers": [
    "JeremyWangNVDA",
    "leofang",
    "jakirkham",
    "mtjrider"
   ],
   "remote_url": "https://github.com/conda-forge/cutensor-feedstock",
   "sha": "6a706a2eeb61ff8a575aef1dc55c7117421ddbb4"
  },
  "home": "https://developer.nvidia.com/cutensor",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "license_file": "LICENSE",
  "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
  "root_pkgs": [
   "keyutils 1.6.1 h4e544f5_0",
   "anaconda-client 1.12.1 pyhd8ed1ab_1",
   "idna 3.4 pyhd8ed1ab_0",
   "freetype 2.12.1 hf0a5ef3_2",
   "xz 5.2.6 h9cdd2b7_0",
   "conda-package-handling 2.2.0 pyh38be061_0",
   "krb5 1.21.2 hc419048_0",
   "lz4-c 1.9.4 hd600fc2_0",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "ca-certificates 2023.7.22 hcefe29a_0",
   "openjpeg 2.5.0 h0d9d63b_3",
   "zipp 3.17.0 pyhd8ed1ab_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "jsonschema-specifications 2023.7.1 pyhd8ed1ab_0",
   "python-fastjsonschema 2.18.1 pyhd8ed1ab_0",
   "libssh2 1.11.0 h492db2e_0",
   "icu 73.2 h787c7f5_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "certifi 2023.7.22 pyhd8ed1ab_0",
   "xorg-libxau 1.0.11 h31becfc_0",
   "zstandard 0.22.0 py310h468e293_0",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "libmambapy 1.5.3 py310h5938bc3_2",
   "yaml 0.2.5 hf897c2e_2",
   "libcurl 8.4.0 h4e8248e_0",
   "_openmp_mutex 4.5 2_gnu",
   "python_abi 3.10 4_cp310",
   "conda-pack 0.7.1 pyhd8ed1ab_0",
   "libuuid 2.38.1 hb4cce97_0",
   "conda-libmamba-solver 23.11.0 pyhd8ed1ab_0",
   "libgomp 13.2.0 hf8544c7_3",
   "conda-index 0.3.0 pyhd8ed1ab_1",
   "libnsl 2.0.1 h31becfc_0",
   "readline 8.2 h8fc344f_1",
   "ripgrep 13.0.0 h1d8f897_3",
   "libgcc-ng 13.2.0 hf8544c7_3",
   "pillow 10.1.0 py310h0ae3e2b_0",
   "su-exec 0.2 h4e544f5_1003",
   "pcre2 10.40 he7b27c6_0",
   "reproc-cpp 14.2.4.post0 h2f0025b_1",
   "perl 5.32.1 4_h31becfc_perl5",
   "ruamel.yaml.clib 0.2.7 py310hb299538_2",
   "libpng 1.6.39 hf9034f9_0",
   "tini 0.19.0 h4e544f5_1",
   "liblief 0.12.3 h4de3ea5_0",
   "libtiff 4.6.0 h1708d11_2",
   "urllib3 2.0.7 pyhd8ed1ab_0",
   "libwebp-base 1.3.2 h31becfc_0",
   "libxcb 1.15 h2a766a3_0",
   "beautifulsoup4 4.12.2 pyha770c72_0",
   "pluggy 1.3.0 pyhd8ed1ab_0",
   "psutil 5.9.5 py310hb299538_1",
   "libxml2 2.11.5 h3091e33_1",
   "jupyter_core 5.5.0 py310h4c7bcd0_0",
   "libev 4.33 h516909a_1",
   "jsonpointer 2.4 py310h4c7bcd0_3",
   "referencing 0.30.2 pyhd8ed1ab_0",
   "more-itertools 10.1.0 pyhd8ed1ab_0",
   "archspec 0.2.2 pyhd8ed1ab_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_1",
   "jsonpatch 1.33 pyhd8ed1ab_0",
   "tzdata 2023c h71feb2d_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "git 2.42.0 pl5321h0d979e1_0",
   "libiconv 1.17 h9cdd2b7_0",
   "filelock 3.13.1 pyhd8ed1ab_0",
   "setuptools 68.2.2 pyhd8ed1ab_0",
   "libarchive 3.7.2 h566b526_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "python-libarchive-c 5.0 py310h4c7bcd0_2",
   "libstdcxx-ng 13.2.0 h9a76618_3",
   "requests-toolbelt 1.0.0 pyhd8ed1ab_0",
   "lcms2 2.15 h922389a_3",
   "c-ares 1.21.0 h31becfc_0",
   "conda-build 3.27.0 py310h4c7bcd0_0",
   "ruamel.yaml 0.18.5 py310hb299538_0",
   "pthread-stubs 0.4 hb9de7d4_1001",
   "pyyaml 6.0.1 py310hb299538_1",
   "libsqlite 3.44.0 h194ca79_0",
   "pyopenssl 23.3.0 pyhd8ed1ab_0",
   "wheel 0.41.3 pyhd8ed1ab_0",
   "pytz 2023.3.post1 pyhd8ed1ab_0",
   "rpds-py 0.12.0 py310h057607a_0",
   "ncurses 6.4 h0425590_2",
   "curl 8.4.0 h4e8248e_0",
   "markupsafe 2.1.3 py310h7c1f4a2_1",
   "click 8.1.7 unix_pyh707e725_0",
   "clyent 1.2.2 pyhd8ed1ab_2",
   "patchelf 0.17.2 h884eca8_0",
   "brotli-python 1.1.0 py310hbb3657e_1",
   "pybind11-abi 4 hd8ed1ab_3",
   "openssl 3.1.4 h31becfc_0",
   "conda 23.10.0 py310h4c7bcd0_1",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "python 3.10.13 hbbe8eec_0_cpython",
   "tqdm 4.66.1 pyhd8ed1ab_0",
   "xorg-libxdmcp 1.1.3 h3557bc0_0",
   "libzlib 1.2.13 h31becfc_5",
   "packaging 23.2 pyhd8ed1ab_0",
   "nbformat 5.9.2 pyhd8ed1ab_0",
   "libjpeg-turbo 3.0.0 h31becfc_1",
   "charset-normalizer 3.3.2 pyhd8ed1ab_0",
   "jsonschema 4.19.2 pyhd8ed1ab_0",
   "traitlets 5.13.0 pyhd8ed1ab_0",
   "tk 8.6.13 h194ca79_0",
   "fmt 10.1.1 h2a328a1_0",
   "reproc 14.2.4.post0 h31becfc_1",
   "importlib_resources 6.1.1 pyhd8ed1ab_0",
   "chardet 5.2.0 py310hbbe02a8_1",
   "typing_extensions 4.8.0 pyha770c72_0",
   "py-lief 0.12.3 py310h130cc07_0",
   "lerc 4.0.0 h4de3ea5_0",
   "libedit 3.1.20191231 he28a2e2_2",
   "libnghttp2 1.58.0 hb0e430d_0",
   "libmamba 1.5.3 hea3be6c_2",
   "conda-package-streaming 0.9.0 pyhd8ed1ab_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "cffi 1.16.0 py310hce94938_0",
   "mamba 1.5.3 py310hcbdc16a_2",
   "six 1.16.0 pyh6c4a22f_0",
   "pycosat 0.6.6 py310hb299538_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "bzip2 1.0.8 h31becfc_5",
   "soupsieve 2.5 pyhd8ed1ab_1",
   "lzo 2.10 h516909a_1000",
   "yaml-cpp 0.8.0 h2f0025b_0",
   "libexpat 2.5.0 hd600fc2_1",
   "libsolv 0.7.25 hd84c7bf_0",
   "zstd 1.5.5 h4c53e97_0",
   "boltons 23.0.0 pyhd8ed1ab_0",
   "platformdirs 4.0.0 pyhd8ed1ab_0",
   "gettext 0.21.1 ha18d298_0",
   "ruamel_yaml 0.15.80 py310hb299538_1009",
   "truststore 0.8.0 pyhd8ed1ab_0",
   "libdeflate 1.19 h31becfc_0",
   "libffi 3.4.2 h3557bc0_5",
   "tornado 6.3.3 py310h7c1f4a2_1",
   "cryptography 41.0.5 py310h34e2850_0",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "patch 2.7.6 hf897c2e_1002",
   "requests 2.31.0 pyhd8ed1ab_0",
   "attrs 23.1.0 pyh71513ae_1",
   "ld_impl_linux-aarch64 2.40 h2d8c526_0",
   "pip 23.3.1 pyhd8ed1ab_0",
   "conda-forge-ci-setup 4.1.0 py310h5bef2de_100",
   "conda-oci-mirror 0.1.0 pyhd8ed1ab_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "conda-forge-metadata 0.6.1 pyhd8ed1ab_0",
   "oniguruma 6.9.9 h31becfc_0",
   "conda-env 2.6.0 1",
   "oras-py 0.1.14 pyhd8ed1ab_0",
   "typing-extensions 4.8.0 hd8ed1ab_0",
   "jq 1.6 hb9de7d4_1000"
  ],
  "summary": "Tensor Linear Algebra on NVIDIA GPUs",
  "tags": []
 },
 "conda_build_config": {
  "BUILD": "aarch64-conda_cos7-linux-gnu",
  "CI": "travis",
  "arm_variant_type": "sbsa",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_arch": "aarch64",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "11.2",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-aarch64-cuda:11.2",
  "extend_keys": [
   "extend_keys",
   "pin_run_as_build",
   "ignore_version",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.22",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-aarch64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cuda_compiler",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "bin/.cutensor-post-link.sh",
  "include/cutensor.h",
  "include/cutensor/types.h",
  "include/cutensorMg.h",
  "lib/libcutensor.so",
  "lib/libcutensor.so.1",
  "lib/libcutensor.so.1.7.0",
  "lib/libcutensorMg.so",
  "lib/libcutensorMg.so.1",
  "lib/libcutensorMg.so.1.7.0"
 ],
 "index": {
  "arch": "aarch64",
  "build": "hc0e3c58_3",
  "build_number": 3,
  "constrains": [
   "arm-variant * sbsa",
   "__glibc >=2.17"
  ],
  "depends": [
   "__glibc >=2.17",
   "cuda-version >=11.0,<12.0a0",
   "cudatoolkit >=11.1,<12",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12"
  ],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "name": "cutensor",
  "platform": "linux",
  "subdir": "linux-aarch64",
  "timestamp": 1700146890219,
  "version": "1.7.0.1"
 },
 "metadata_version": 1,
 "name": "cutensor",
 "raw_recipe": "{% set version = \"1.7.0.1\" %}\n\n{% if cuda_compiler_version in (None, \"None\", True, False) %}\n{% set cuda_major = 0 %}\n{% else %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"11.2\").split(\".\")[0] | int %}\n{% endif %}\n\n{% set platform = \"linux-x86_64\" %}    # [linux64]\n{% set platform = \"linux-ppc64le\" %}   # [ppc64le]\n{% set platform = \"linux-sbsa\" %}      # [aarch64]\n{% set platform = \"windows-x86_64\" %}  # [win]\n{% set extension = \"tar.xz\" %}  # [not win]\n{% set extension = \"zip\" %}     # [win]\n\npackage:\n  name: cutensor\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/cutensor/redist/libcutensor/{{ platform }}/libcutensor-{{ platform }}-{{ version }}-archive.{{ extension }}\n  sha256: dd3557891371a19e73e7c955efe5383b0bee954aba6a30e4892b0e7acb9deb26  # [linux64]\n  sha256: af4ad5e29dcb636f1bf941ed1fd7fc8053eeec4813fbc0b41581e114438e84c8  # [ppc64le]\n  sha256: c31f8e4386539434a5d1643ebfed74572011783b4e21b62be52003e3a9de3720  # [aarch64]\n  sha256: cdbb53bcc1c7b20ee0aa2dee781644a324d2d5e8065944039024fe22d6b822ab  # [win64]\n\nbuild:\n  number: 3\n  skip: true  # [win32 or osx or cuda_compiler_version not in (\"11.2\", \"12.0\")]\n  script:\n    - mkdir -p $PREFIX/include                                             # [linux]\n    - mv include/* $PREFIX/include/                                        # [linux]\n    - mkdir -p $PREFIX/lib                                                 # [linux]\n    - mv lib/{{ cuda_major }}/*.so* $PREFIX/lib/                           # [linux]\n\n    - copy include\\\\cutensor.h %LIBRARY_INC%\\\\                             # [win64]\n    - copy include\\\\cutensorMg.h %LIBRARY_INC%\\\\                           # [win64]\n    - mkdir %LIBRARY_INC%\\\\cutensor                                        # [win64]\n    - copy include\\\\cutensor\\\\types.h %LIBRARY_INC%\\\\cutensor              # [win64]\n    - del lib\\\\{{ cuda_major }}\\\\*static*                                  # [win64]\n    - copy lib\\\\{{ cuda_major }}\\\\*.dll %LIBRARY_BIN%\\\\                    # [win64]\n    - copy lib\\\\{{ cuda_major }}\\\\*.lib %LIBRARY_LIB%\\\\                    # [win64]\n  run_exports:\n    - {{ pin_subpackage('cutensor') }}\n  ignore_run_exports:\n    - cudatoolkit  # [(cuda_compiler_version or \"\").startswith(\"11\")]\n  missing_dso_whitelist:\n    - \"*/libcuda.so.*\"    # [linux]\n    - \"*/nvcuda.dll\"      # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    - sysroot_{{ target_platform }} 2.17    # [linux]\n  host:\n    - patchelf >=0.12  # [linux]\n    - cuda-version {{ cuda_major }}.0\n    - libcublas  # [(cuda_compiler_version or \"\").startswith(\"12\")]\n  run:\n    - {{ pin_compatible(\"cuda-version\", max_pin=\"x\") }}\n    - cudatoolkit >=11.1,<12  # [(cuda_compiler_version or \"\").startswith(\"11\")]\n    - libcublas               # [(cuda_compiler_version or \"\").startswith(\"12\")]\n  run_constrained:\n    # Only GLIBC_2.17 or older symbols present\n    - __glibc >=2.17      # [linux]\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\ntest:\n  requires:\n    - git\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - sysroot_{{ target_platform }} 2.17  # [linux]\n    # make sure we pick up the version matching the docker,\n    # or the linker would complain \n    - cudatoolkit {{ cuda_compiler_version }}  # [(cuda_compiler_version or \"\").startswith(\"11\")]\n    # need the libcuda stub for import test\n    - cuda-driver-dev                          # [linux and (cuda_compiler_version or \"\").startswith(\"12\")]\n  files:\n    - test_load_elf.c        # [linux]\n\nabout:\n  home: https://developer.nvidia.com/cutensor\n  license: LicenseRef-cuTENSOR-Software-License-Agreement\n  license_url: https://docs.nvidia.com/cuda/cutensor/license.html\n  license_file: LICENSE\n  summary: Tensor Linear Algebra on NVIDIA GPUs\n  description: |\n    The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\n    algebra library providing tensor contraction, reduction and elementwise\n    operations. cuTENSOR is used to accelerate applications in the areas of\n    deep learning training and inference, computer vision, quantum chemistry\n    and computational physics.\n\n    License Agreements:- The packages are governed by the NVIDIA cuTENSOR\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuTENSOR EULA -\n    https://docs.nvidia.com/cuda/cutensor/license.html\n  doc_url: https://docs.nvidia.com/cuda/cutensor/index.html\n  dev_url: https://developer.nvidia.com/cutensor/downloads\n\nextra:\n  recipe-maintainers:\n    - JeremyWangNVDA\n    - leofang\n    - jakirkham\n    - mtjrider\n",
 "rendered_recipe": {
  "about": {
   "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
   "dev_url": "https://developer.nvidia.com/cutensor/downloads",
   "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
   "home": "https://developer.nvidia.com/cutensor",
   "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
   "summary": "Tensor Linear Algebra on NVIDIA GPUs"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "missing_dso_whitelist": [
    "*/libcuda.so.*"
   ],
   "number": "3",
   "run_exports": [
    "cutensor >=1.7.0.1,<2.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "mv include/* $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/11/*.so* $PREFIX/lib/"
   ],
   "string": "hc0e3c58_3"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "flow_run_id": "travis_613415555",
   "recipe-maintainers": [
    "JeremyWangNVDA",
    "jakirkham",
    "leofang",
    "mtjrider"
   ],
   "remote_url": "https://github.com/conda-forge/cutensor-feedstock",
   "sha": "6a706a2eeb61ff8a575aef1dc55c7117421ddbb4"
  },
  "package": {
   "name": "cutensor",
   "version": "1.7.0.1"
  },
  "requirements": {
   "build": [
    "_openmp_mutex 4.5 2_gnu",
    "_sysroot_linux-aarch64_curr_repodata_hack 4 h57d6b7b_13",
    "arm-variant 1.0.0 sbsa",
    "binutils_impl_linux-aarch64 2.39 h48546ad_1",
    "binutils_linux-aarch64 2.39 h489c705_13",
    "gcc_impl_linux-aarch64 10.4.0 h9569200_19",
    "gcc_linux-aarch64 10.4.0 h72ad2ee_13",
    "gxx_impl_linux-aarch64 10.4.0 h9569200_19",
    "gxx_linux-aarch64 10.4.0 hb08d869_13",
    "kernel-headers_linux-aarch64 4.18.0 h5b4a56d_13",
    "ld_impl_linux-aarch64 2.39 h16cd69b_1",
    "libgcc-devel_linux-aarch64 10.4.0 h3c6860a_19",
    "libgcc-ng 13.2.0 hf8544c7_3",
    "libgomp 13.2.0 hf8544c7_3",
    "libsanitizer 10.4.0 h0e20637_19",
    "libstdcxx-devel_linux-aarch64 10.4.0 h3c6860a_19",
    "libstdcxx-ng 13.2.0 h9a76618_3",
    "nvcc_linux-aarch64 11.2 hcded775_23",
    "sed 4.8 ha0d5d3d_0",
    "sysroot_linux-aarch64 2.17 h5b4a56d_13"
   ],
   "host": [
    "_openmp_mutex 4.5 2_gnu",
    "cuda-version 11.0 h6b8d8af_2",
    "libgcc-ng 13.2.0 hf8544c7_3",
    "libgomp 13.2.0 hf8544c7_3",
    "libstdcxx-ng 13.2.0 h9a76618_3",
    "patchelf 0.17.2 h884eca8_0"
   ],
   "run": [
    "__glibc >=2.17",
    "cuda-version >=11.0,<12.0a0",
    "cudatoolkit >=11.1,<12",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12"
   ],
   "run_constrained": [
    "__glibc >=2.17",
    "arm-variant * sbsa"
   ]
  },
  "source": {
   "sha256": "c31f8e4386539434a5d1643ebfed74572011783b4e21b62be52003e3a9de3720",
   "url": "https://developer.download.nvidia.com/compute/cutensor/redist/libcutensor/linux-sbsa/libcutensor-linux-sbsa-1.7.0.1-archive.tar.xz"
  },
  "test": {
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "cudatoolkit 11.2.*",
    "gcc_linux-aarch64 10.*",
    "git",
    "gxx_linux-aarch64 10.*",
    "nvcc_linux-aarch64 11.2.*",
    "sysroot_linux-aarch64 2.17.*"
   ]
  }
 },
 "version": "1.7.0.1"
}