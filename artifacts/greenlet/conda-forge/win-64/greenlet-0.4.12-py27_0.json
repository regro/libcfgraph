{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge/win-64",
   "https://conda.anaconda.org/conda-forge/noarch",
   "https://repo.continuum.io/pkgs/free/win-64",
   "https://repo.continuum.io/pkgs/free/noarch",
   "https://repo.continuum.io/pkgs/pro/win-64",
   "https://repo.continuum.io/pkgs/pro/noarch",
   "https://repo.continuum.io/pkgs/msys2/win-64",
   "https://repo.continuum.io/pkgs/msys2/noarch"
  ],
  "conda_build_version": "2.1.10",
  "conda_env_version": "4.2.13",
  "conda_private": false,
  "conda_version": "4.2.13",
  "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
  "dev_url": "https://github.com/python-greenlet/greenlet",
  "doc_url": "https://greenlet.readthedocs.io",
  "env_vars": {
   "CIO_TEST": "<not set>",
   "CONDA_DEFAULT_ENV": "root",
   "CONDA_ENVS_PATH": "<not set>",
   "PATH": "C:\\Miniconda-x64\\Library\\bin;C:\\Miniconda-x64\\Library\\bin;C:\\Miniconda-x64\\Library\\bin;C:\\Miniconda-x64;C:\\Miniconda-x64\\Library\\mingw-w64\\bin;C:\\Miniconda-x64\\Library\\usr\\bin;C:\\Miniconda-x64\\Library\\bin;C:\\Miniconda-x64\\Scripts;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\7-Zip;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Tools\\GitVersion;C:\\Tools\\PsTools;C:\\Program Files\\Git LFS;C:\\Program Files (x86)\\Subversion\\bin;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Tools\\WebDriver;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.4\\;C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\PrivateAssemblies\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI\\wbin;C:\\Ruby193\\bin;C:\\Tools\\NUnit\\bin;C:\\Tools\\xUnit;C:\\Tools\\MSpec;C:\\Tools\\Coverity\\bin;C:\\Program Files (x86)\\CMake\\bin;C:\\go\\bin;C:\\Program Files\\Java\\jdk1.8.0\\bin;C:\\Python27;C:\\Program Files\\nodejs;C:\\Program Files (x86)\\iojs;C:\\Program Files\\iojs;C:\\Users\\appveyor\\AppData\\Roaming\\npm;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\MSBuild\\14.0\\Bin;C:\\Tools\\NuGet;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files\\Microsoft DNX\\Dnvm;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Apache\\Maven\\bin;C:\\Python27\\Scripts;C:\\Tools\\NUnit3;C:\\Program Files\\Mercurial\\;C:\\Program Files (x86)\\Yarn\\bin;C:\\Program Files\\LLVM\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\erl8.3\\bin;C:\\Tools\\curl\\bin;C:\\Program Files\\Microsoft Service Fabric\\bin\\Fabric\\Fabric.Code;C:\\Program Files\\Microsoft SDKs\\Service Fabric\\Tools\\ServiceFabricLocalClusterManager;C:\\Program Files\\Amazon\\AWSCLI\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\usr\\bin;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\DTS\\Binn\\;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\SQLDB\\DAC\\140;C:\\Users\\appveyor\\AppData\\Local\\Yarn\\.bin;C:\\Users\\appveyor\\AppData\\Roaming\\npm;C:\\Program Files\\AppVeyor\\BuildAgent\\",
   "PYTHONHOME": "<not set>",
   "PYTHONPATH": "<not set>"
  },
  "home": "https://github.com/python-greenlet/greenlet",
  "license": "MIT",
  "license_family": "MIT",
  "offline": false,
  "root_pkgs": [
   "conda-forge::anaconda-client-1.6.3-py27_0",
   "conda-forge::beautifulsoup4-4.5.3-py27_0",
   "cffi-1.9.1-py27_0",
   "conda-forge::chardet-3.0.2-py27_1",
   "conda-forge::clyent-1.2.1-py27_0",
   "conda-forge::conda-4.2.13-py27_0",
   "conda-forge::conda-build-2.1.10-py27_0",
   "conda-forge::conda-env-2.6.0-0",
   "conda-forge::conda-forge-build-setup-4.4.4-0",
   "conda-forge::conda-verify-2.0.0-py27_0",
   "console_shortcut-0.1.1-py27_1",
   "conda-forge::contextlib2-0.5.5-py27_0",
   "cryptography-1.7.1-py27_0",
   "enum34-1.1.6-py27_0",
   "conda-forge::filelock-2.0.6-py27_0",
   "conda-forge::futures-3.0.5-py27_0",
   "idna-2.2-py27_0",
   "ipaddress-1.0.18-py27_0",
   "conda-forge::jinja2-2.9.5-py27_0",
   "conda-forge::markupsafe-0.23-py27_1",
   "menuinst-1.4.4-py27_0",
   "openssl-1.0.2k-vc9_0",
   "pip-9.0.1-py27_1",
   "conda-forge::pkginfo-1.2.1-py27_0",
   "pyasn1-0.1.9-py27_0",
   "pycosat-0.6.1-py27_1",
   "pycparser-2.17-py27_0",
   "conda-forge::pycrypto-2.6.1-py27_0",
   "pyopenssl-16.2.0-py27_0",
   "python-2.7.13-0",
   "conda-forge::python-dateutil-2.6.0-py27_0",
   "conda-forge::pytz-2017.2-py27_0",
   "pywin32-220-py27_2",
   "conda-forge::pyyaml-3.12-py27_1",
   "requests-2.12.4-py27_0",
   "ruamel_yaml-0.11.14-py27_1",
   "setuptools-27.2.0-py27_1",
   "six-1.10.0-py27_0",
   "conda-forge::vs2008_express_vc_python_patch-1.0.0-0",
   "vs2008_runtime-9.00.30729.5054-0",
   "wheel-0.29.0-py27_0",
   "conda-forge::yaml-0.1.6-vc9_0"
  ],
  "summary": "Lightweight in-process concurrent programming"
 },
 "conda_build_config": {},
 "files": [
  "Lib/site-packages/greenlet-0.4.12-py2.7.egg-info",
  "include/greenlet/greenlet.h",
  "Lib/site-packages/greenlet.pyd"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py27_0",
  "build_number": 0,
  "depends": [
   "python 2.7*"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "greenlet",
  "platform": "win",
  "subdir": "win-64",
  "version": "0.4.12"
 },
 "metadata_version": 1,
 "name": "greenlet",
 "raw_recipe": "{% set name = \"greenlet\" %}\n{% set version = \"0.4.12\" %}\n{% set sha256 = \"e4c99c6010a5d153d481fdaf63b8a0782825c0721506d880403a3b9b82ae347e\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  script: python setup.py install\n\nrequirements:\n  build:\n    - python\n\n  run:\n    - python\n\ntest:\n  imports:\n    - greenlet\n\nabout:\n  home: https://github.com/python-greenlet/greenlet\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Lightweight in-process concurrent programming'\n\n  description: |\n    The greenlet package is a spin-off of Stackless, a version of CPython that\n    supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n    (typically in a single or a few OS-level threads) and are synchronized with\n    data exchanges on \"channels\".\n\n    A \"greenlet\", on the other hand, is a still more primitive notion of\n    micro-thread with no implicit scheduling; coroutines, in other words. This\n    is useful when you want to control exactly when your code runs. You can\n    build custom scheduled micro-threads on top of greenlet; however, it seems\n    that greenlets are useful on their own as a way to make advanced control\n    flow structures. For example, we can recreate generators; the difference\n    with Python's own generators is that our generators can call nested\n    functions and the nested functions can yield values too. Additionally,\n    you don't need a \"yield\" keyword. See the example in\n    tests/test_generator.py.\n\n    Greenlets are provided as a C extension module for the regular unmodified\n    interpreter.\n\n    Greenlets are lightweight coroutines for in-process concurrent programming.\n  doc_url: https://greenlet.readthedocs.io\n  dev_url: https://github.com/python-greenlet/greenlet\n\nextra:\n  recipe-maintainers:\n    - curtisalexander\n",
 "rendered_recipe": {
  "about": {
   "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
   "dev_url": "https://github.com/python-greenlet/greenlet",
   "doc_url": "https://greenlet.readthedocs.io",
   "home": "https://github.com/python-greenlet/greenlet",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Lightweight in-process concurrent programming"
  },
  "build": {
   "noarch": "",
   "noarch_python": false,
   "number": "0",
   "script": "python setup.py install",
   "string": "py27_0"
  },
  "extra": {
   "final": true,
   "recipe-maintainers": [
    "curtisalexander"
   ]
  },
  "package": {
   "name": "greenlet",
   "version": "0.4.12"
  },
  "requirements": {
   "build": [
    "python 2.7.13 1",
    "vs2008_runtime 9.00.30729.5054 0"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "fn": "greenlet-0.4.12.tar.gz",
   "sha256": "e4c99c6010a5d153d481fdaf63b8a0782825c0721506d880403a3b9b82ae347e",
   "url": "https://pypi.io/packages/source/g/greenlet/greenlet-0.4.12.tar.gz"
  },
  "test": {
   "imports": [
    "greenlet"
   ]
  }
 },
 "version": "0.4.12"
}